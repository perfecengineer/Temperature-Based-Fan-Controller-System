
ADC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000293a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  0000293a  000029ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080019c  0080019c  00002b0a  2**0
                  ALLOC
  3 .stab         00002a30  00000000  00000000  00002b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001417  00000000  00000000  0000553c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006953  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000090f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a476  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b64c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bb02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 13 	call	0x26e4	; 0x26e4 <main>
      8a:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e9       	ldi	r26, 0x93	; 147
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e9       	ldi	r24, 0x93	; 147
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e9       	ldi	r22, 0x93	; 147
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 56       	subi	r30, 0x65	; 101
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <iniat_Timer>:
/*** Array to store the counts the interrupts for each timer ***/
static uint8 Counter[TIMERS_NUMBERS] = {0};
#endif
#endif
void iniat_Timer(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(CONTROL_REG_TIMER0,TIMER0_CTC_ACTIVE_BIT);
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_WAVEFORM_BIT0);
				SET_BIT(CONTROL_REG_TIMER0,TIMER0_WAVEFORM_BIT1);

	#elif	TIMER0_SELECTION_MODE   ==	FAST_PWM_MODE
				DATA_REG_TIMER0 = 0;
     e36:	e2 e5       	ldi	r30, 0x52	; 82
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	10 82       	st	Z, r1
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CTC_ACTIVE_BIT);
     e3c:	a3 e5       	ldi	r26, 0x53	; 83
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e3 e5       	ldi	r30, 0x53	; 83
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8f 77       	andi	r24, 0x7F	; 127
     e48:	8c 93       	st	X, r24
				SET_BIT(CONTROL_REG_TIMER0,TIMER0_WAVEFORM_BIT0);
     e4a:	a3 e5       	ldi	r26, 0x53	; 83
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e3 e5       	ldi	r30, 0x53	; 83
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	80 64       	ori	r24, 0x40	; 64
     e56:	8c 93       	st	X, r24
				SET_BIT(CONTROL_REG_TIMER0,TIMER0_WAVEFORM_BIT1);
     e58:	a3 e5       	ldi	r26, 0x53	; 83
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e3 e5       	ldi	r30, 0x53	; 83
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	88 60       	ori	r24, 0x08	; 8
     e64:	8c 93       	st	X, r24
	#elif 	TIMER0_SELECTION_OUTPUT_COMPARE_MODE   ==	Toggle_OCx_on_compare_match_IN_CTC_Mode_only_OR_Reserved
				GPIO_setupPinDirection(TIMER0_CTC_MODE_PORT_ID,TIMER0_CTC_MODE_PIN_ID,PIN_OUTPUT);
				SET_BIT(CONTROL_REG_TIMER0,TIMER0_OUTPUT_MODE_BIT0);
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_OUTPUT_MODE_BIT1);
	#elif 	TIMER0_SELECTION_OUTPUT_COMPARE_MODE   ==	NON_INVERTING_MODE
				GPIO_setupPinDirection(TIMER0_CTC_MODE_PORT_ID,TIMER0_CTC_MODE_PIN_ID,PIN_OUTPUT);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	63 e0       	ldi	r22, 0x03	; 3
     e6a:	41 e0       	ldi	r20, 0x01	; 1
     e6c:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_OUTPUT_MODE_BIT0);
     e70:	a3 e5       	ldi	r26, 0x53	; 83
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e3 e5       	ldi	r30, 0x53	; 83
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8f 7e       	andi	r24, 0xEF	; 239
     e7c:	8c 93       	st	X, r24
				SET_BIT(CONTROL_REG_TIMER0,TIMER0_OUTPUT_MODE_BIT1);
     e7e:	a3 e5       	ldi	r26, 0x53	; 83
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e3 e5       	ldi	r30, 0x53	; 83
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 62       	ori	r24, 0x20	; 32
     e8a:	8c 93       	st	X, r24
	#elif 	TIMER0_CLOCK_SELECT		==		CLK_1
				SET_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT0);
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT1);
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT2);
	#elif 	TIMER0_CLOCK_SELECT		==		CLK_8
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT0);
     e8c:	a3 e5       	ldi	r26, 0x53	; 83
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e3 e5       	ldi	r30, 0x53	; 83
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8e 7f       	andi	r24, 0xFE	; 254
     e98:	8c 93       	st	X, r24
				SET_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT1);
     e9a:	a3 e5       	ldi	r26, 0x53	; 83
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e3 e5       	ldi	r30, 0x53	; 83
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	82 60       	ori	r24, 0x02	; 2
     ea6:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT2);
     ea8:	a3 e5       	ldi	r26, 0x53	; 83
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e3 e5       	ldi	r30, 0x53	; 83
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8b 7f       	andi	r24, 0xFB	; 251
     eb4:	8c 93       	st	X, r24

/************************************* for counter 2 **************************************************/
#elif SELECTION_MODULE2     ==     COUNTER2_ENABLE
/****************************** For falling edge ******************************************************/
	#if		SELECTION_EDGE_COUNTER2   		==	  FALLAING_EDGE
				CLEAR_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT0);
     eb6:	a5 e4       	ldi	r26, 0x45	; 69
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e5 e4       	ldi	r30, 0x45	; 69
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8e 7f       	andi	r24, 0xFE	; 254
     ec2:	8c 93       	st	X, r24
				SET_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT1);
     ec4:	a5 e4       	ldi	r26, 0x45	; 69
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e5 e4       	ldi	r30, 0x45	; 69
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	82 60       	ori	r24, 0x02	; 2
     ed0:	8c 93       	st	X, r24
				SET_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT2);
     ed2:	a5 e4       	ldi	r26, 0x45	; 69
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e5 e4       	ldi	r30, 0x45	; 69
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	84 60       	ori	r24, 0x04	; 4
     ede:	8c 93       	st	X, r24
				SET_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT0);
				SET_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT1);
				SET_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT2);
					#endif
#endif
}
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <disable_Timer>:
uint8 disable_Timer(uint8 timer_selection)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <disable_Timer+0x6>
     eec:	00 d0       	rcall	.+0      	; 0xeee <disable_Timer+0x8>
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ERROR_STATE = OK;
     ef4:	19 82       	std	Y+1, r1	; 0x01
	switch(timer_selection)
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	3c 83       	std	Y+4, r19	; 0x04
     efe:	2b 83       	std	Y+3, r18	; 0x03
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	9c 81       	ldd	r25, Y+4	; 0x04
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	91 05       	cpc	r25, r1
     f08:	01 f1       	breq	.+64     	; 0xf4a <disable_Timer+0x64>
     f0a:	2b 81       	ldd	r18, Y+3	; 0x03
     f0c:	3c 81       	ldd	r19, Y+4	; 0x04
     f0e:	22 30       	cpi	r18, 0x02	; 2
     f10:	31 05       	cpc	r19, r1
     f12:	89 f1       	breq	.+98     	; 0xf76 <disable_Timer+0x90>
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	9c 81       	ldd	r25, Y+4	; 0x04
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	09 f0       	breq	.+2      	; 0xf1e <disable_Timer+0x38>
     f1c:	42 c0       	rjmp	.+132    	; 0xfa2 <disable_Timer+0xbc>
	{
/****************** To disable timer 0, clear the clock source *************/
	case Timer0:
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT0);
     f1e:	a3 e5       	ldi	r26, 0x53	; 83
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e3 e5       	ldi	r30, 0x53	; 83
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8e 7f       	andi	r24, 0xFE	; 254
     f2a:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT1);
     f2c:	a3 e5       	ldi	r26, 0x53	; 83
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e3 e5       	ldi	r30, 0x53	; 83
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8d 7f       	andi	r24, 0xFD	; 253
     f38:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT2);
     f3a:	a3 e5       	ldi	r26, 0x53	; 83
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e3 e5       	ldi	r30, 0x53	; 83
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8b 7f       	andi	r24, 0xFB	; 251
     f46:	8c 93       	st	X, r24
     f48:	2e c0       	rjmp	.+92     	; 0xfa6 <disable_Timer+0xc0>
	break;
/****************** To disable timer 1, clear the clock source *************/
	case Timer1:
				CLEAR_BIT(CONTROL_REG_TIMER1B,TIMER1_CLOCK_SELECT_BIT0);
     f4a:	ae e4       	ldi	r26, 0x4E	; 78
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	ee e4       	ldi	r30, 0x4E	; 78
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8e 7f       	andi	r24, 0xFE	; 254
     f56:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER1B,TIMER1_CLOCK_SELECT_BIT1);
     f58:	ae e4       	ldi	r26, 0x4E	; 78
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	ee e4       	ldi	r30, 0x4E	; 78
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8d 7f       	andi	r24, 0xFD	; 253
     f64:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER1B,TIMER1_CLOCK_SELECT_BIT2);
     f66:	ae e4       	ldi	r26, 0x4E	; 78
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ee e4       	ldi	r30, 0x4E	; 78
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8b 7f       	andi	r24, 0xFB	; 251
     f72:	8c 93       	st	X, r24
     f74:	18 c0       	rjmp	.+48     	; 0xfa6 <disable_Timer+0xc0>
	break;
/****************** To disable timer 2, clear the clock source *************/
	case Timer2:
				CLEAR_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT0);
     f76:	a5 e4       	ldi	r26, 0x45	; 69
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e4       	ldi	r30, 0x45	; 69
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8e 7f       	andi	r24, 0xFE	; 254
     f82:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT1);
     f84:	a5 e4       	ldi	r26, 0x45	; 69
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e5 e4       	ldi	r30, 0x45	; 69
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8d 7f       	andi	r24, 0xFD	; 253
     f90:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT2);
     f92:	a5 e4       	ldi	r26, 0x45	; 69
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e5 e4       	ldi	r30, 0x45	; 69
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8b 7f       	andi	r24, 0xFB	; 251
     f9e:	8c 93       	st	X, r24
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <disable_Timer+0xc0>
	break;
/************* For error state *********************/
	default:ERROR_STATE = NOTOK;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01

	}

	return ERROR_STATE;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <DUTY_cycleForTimers>:

/********* Set duty for timers ************************/
uint8 DUTY_cycleForTimers(uint8 timer,uint16 duty,uint16 pre_load)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <DUTY_cycleForTimers+0x6>
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <DUTY_cycleForTimers+0x8>
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <DUTY_cycleForTimers+0xa>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	8a 83       	std	Y+2, r24	; 0x02
     fc6:	7c 83       	std	Y+4, r23	; 0x04
     fc8:	6b 83       	std	Y+3, r22	; 0x03
     fca:	5e 83       	std	Y+6, r21	; 0x06
     fcc:	4d 83       	std	Y+5, r20	; 0x05
	uint8 Error_state = NOTOK;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01

	if(timer >= Timer0 && timer <= Timer1)
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	82 30       	cpi	r24, 0x02	; 2
     fd6:	50 f4       	brcc	.+20     	; 0xfec <DUTY_cycleForTimers+0x36>
	{
		switch(timer)
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	21 f4       	brne	.+8      	; 0xfea <DUTY_cycleForTimers+0x34>
		{
		case Timer0:
#if SELECTION_MODULE0				==			 TIMER0_ENABLE
#if TIMER0_SELECTION_MODE			!=           NORMAL_MODE
			OUTPUT_COMPARE_REG_TIMER0 = duty;
     fe2:	ec e5       	ldi	r30, 0x5C	; 92
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	80 83       	st	Z, r24
		DATA_REG_TIMER2 = pre_load;
#endif
#endif
		break;
		}
		Error_state = OK;
     fea:	19 82       	std	Y+1, r1	; 0x01
	}
	return Error_state;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
}
     fee:	26 96       	adiw	r28, 0x06	; 6
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <GPIO_setupPinDirection>:
#include"gpio_privte.h"
#include"../../UTILS/common_macro.h"

/*** Implementation of function, use to determine the pin mode***/
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDircetonType direction)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <GPIO_setupPinDirection+0x6>
    1006:	00 d0       	rcall	.+0      	; 0x1008 <GPIO_setupPinDirection+0x8>
    1008:	0f 92       	push	r0
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	6a 83       	std	Y+2, r22	; 0x02
    1012:	4b 83       	std	Y+3, r20	; 0x03
	if(!((port_num > 3) || (pin_num > 7)))
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	84 30       	cpi	r24, 0x04	; 4
    1018:	08 f0       	brcs	.+2      	; 0x101c <GPIO_setupPinDirection+0x1c>
    101a:	d5 c0       	rjmp	.+426    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	88 30       	cpi	r24, 0x08	; 8
    1020:	08 f0       	brcs	.+2      	; 0x1024 <GPIO_setupPinDirection+0x24>
    1022:	d1 c0       	rjmp	.+418    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
	{
		switch(port_num)
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3d 83       	std	Y+5, r19	; 0x05
    102c:	2c 83       	std	Y+4, r18	; 0x04
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	91 05       	cpc	r25, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <GPIO_setupPinDirection+0x3a>
    1038:	43 c0       	rjmp	.+134    	; 0x10c0 <GPIO_setupPinDirection+0xc0>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	2c f4       	brge	.+10     	; 0x104e <GPIO_setupPinDirection+0x4e>
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	71 f0       	breq	.+28     	; 0x1068 <GPIO_setupPinDirection+0x68>
    104c:	bc c0       	rjmp	.+376    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <GPIO_setupPinDirection+0x5a>
    1058:	5f c0       	rjmp	.+190    	; 0x1118 <GPIO_setupPinDirection+0x118>
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	83 30       	cpi	r24, 0x03	; 3
    1060:	91 05       	cpc	r25, r1
    1062:	09 f4       	brne	.+2      	; 0x1066 <GPIO_setupPinDirection+0x66>
    1064:	85 c0       	rjmp	.+266    	; 0x1170 <GPIO_setupPinDirection+0x170>
    1066:	af c0       	rjmp	.+350    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
		{
			case PORTA_ID:
				if(direction == PIN_OUTPUT)
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	a1 f4       	brne	.+40     	; 0x1096 <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA_ID_REG,pin_num);
    106e:	aa e3       	ldi	r26, 0x3A	; 58
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	ea e3       	ldi	r30, 0x3A	; 58
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <GPIO_setupPinDirection+0x8c>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <GPIO_setupPinDirection+0x88>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	98 c0       	rjmp	.+304    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRA_ID_REG,pin_num);
    1096:	aa e3       	ldi	r26, 0x3A	; 58
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ea e3       	ldi	r30, 0x3A	; 58
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <GPIO_setupPinDirection+0xb4>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <GPIO_setupPinDirection+0xb0>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	83 c0       	rjmp	.+262    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
				}
				break;
			case PORTB_ID:
				if(direction == PIN_OUTPUT)
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	a1 f4       	brne	.+40     	; 0x10ee <GPIO_setupPinDirection+0xee>
				{
					SET_BIT(DDRB_ID_REG,pin_num);
    10c6:	a7 e3       	ldi	r26, 0x37	; 55
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e7 e3       	ldi	r30, 0x37	; 55
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <GPIO_setupPinDirection+0xe4>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <GPIO_setupPinDirection+0xe0>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	6c c0       	rjmp	.+216    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRB_ID_REG,pin_num);
    10ee:	a7 e3       	ldi	r26, 0x37	; 55
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e7 e3       	ldi	r30, 0x37	; 55
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <GPIO_setupPinDirection+0x10c>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <GPIO_setupPinDirection+0x108>
    1110:	80 95       	com	r24
    1112:	84 23       	and	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	57 c0       	rjmp	.+174    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
				}
				break;
			case PORTC_ID:
				if(direction == PIN_OUTPUT)
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	a1 f4       	brne	.+40     	; 0x1146 <GPIO_setupPinDirection+0x146>
				{
					SET_BIT(DDRC_ID_REG,pin_num);
    111e:	a4 e3       	ldi	r26, 0x34	; 52
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e4 e3       	ldi	r30, 0x34	; 52
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <GPIO_setupPinDirection+0x13c>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <GPIO_setupPinDirection+0x138>
    1140:	84 2b       	or	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	40 c0       	rjmp	.+128    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRC_ID_REG,pin_num);
    1146:	a4 e3       	ldi	r26, 0x34	; 52
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e4 e3       	ldi	r30, 0x34	; 52
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_setupPinDirection+0x164>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_setupPinDirection+0x160>
    1168:	80 95       	com	r24
    116a:	84 23       	and	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	2b c0       	rjmp	.+86     	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
				}
				break;
			case PORTD_ID:
				if(direction == PIN_OUTPUT)
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	a1 f4       	brne	.+40     	; 0x119e <GPIO_setupPinDirection+0x19e>
				{
					SET_BIT(DDRD_ID_REG,pin_num);
    1176:	a1 e3       	ldi	r26, 0x31	; 49
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e1 e3       	ldi	r30, 0x31	; 49
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <GPIO_setupPinDirection+0x194>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <GPIO_setupPinDirection+0x190>
    1198:	84 2b       	or	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	14 c0       	rjmp	.+40     	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRD_ID_REG,pin_num);
    119e:	a1 e3       	ldi	r26, 0x31	; 49
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e1 e3       	ldi	r30, 0x31	; 49
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <GPIO_setupPinDirection+0x1bc>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <GPIO_setupPinDirection+0x1b8>
    11c0:	80 95       	com	r24
    11c2:	84 23       	and	r24, r20
    11c4:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <GPIO_writePin>:
/*** Implementation of function, use to write the pin value***/
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 value)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <GPIO_writePin+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <GPIO_writePin+0x8>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
    11e8:	4b 83       	std	Y+3, r20	; 0x03
	if(!((port_num > 3) || (pin_num > 7)))
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <GPIO_writePin+0x1c>
    11f0:	d5 c0       	rjmp	.+426    	; 0x139c <GPIO_writePin+0x1c6>
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	88 30       	cpi	r24, 0x08	; 8
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <GPIO_writePin+0x24>
    11f8:	d1 c0       	rjmp	.+418    	; 0x139c <GPIO_writePin+0x1c6>
	{
		switch(port_num)
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3d 83       	std	Y+5, r19	; 0x05
    1202:	2c 83       	std	Y+4, r18	; 0x04
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <GPIO_writePin+0x3a>
    120e:	43 c0       	rjmp	.+134    	; 0x1296 <GPIO_writePin+0xc0>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <GPIO_writePin+0x4e>
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	71 f0       	breq	.+28     	; 0x123e <GPIO_writePin+0x68>
    1222:	bc c0       	rjmp	.+376    	; 0x139c <GPIO_writePin+0x1c6>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <GPIO_writePin+0x5a>
    122e:	5f c0       	rjmp	.+190    	; 0x12ee <GPIO_writePin+0x118>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <GPIO_writePin+0x66>
    123a:	85 c0       	rjmp	.+266    	; 0x1346 <GPIO_writePin+0x170>
    123c:	af c0       	rjmp	.+350    	; 0x139c <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
				if(value == LOGIC_HIGH)
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	a1 f4       	brne	.+40     	; 0x126c <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA_ID_REG,pin_num);
    1244:	ab e3       	ldi	r26, 0x3B	; 59
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	eb e3       	ldi	r30, 0x3B	; 59
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <GPIO_writePin+0x8c>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <GPIO_writePin+0x88>
    1266:	84 2b       	or	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	98 c0       	rjmp	.+304    	; 0x139c <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA_ID_REG,pin_num);
    126c:	ab e3       	ldi	r26, 0x3B	; 59
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	eb e3       	ldi	r30, 0x3B	; 59
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <GPIO_writePin+0xb4>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <GPIO_writePin+0xb0>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	83 c0       	rjmp	.+262    	; 0x139c <GPIO_writePin+0x1c6>
				}
				break;
			case PORTB_ID:
				if(value == LOGIC_HIGH)
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	a1 f4       	brne	.+40     	; 0x12c4 <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB_ID_REG,pin_num);
    129c:	a8 e3       	ldi	r26, 0x38	; 56
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e8 e3       	ldi	r30, 0x38	; 56
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <GPIO_writePin+0xe4>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <GPIO_writePin+0xe0>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	6c c0       	rjmp	.+216    	; 0x139c <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB_ID_REG,pin_num);
    12c4:	a8 e3       	ldi	r26, 0x38	; 56
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e8 e3       	ldi	r30, 0x38	; 56
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_writePin+0x10c>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_writePin+0x108>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	57 c0       	rjmp	.+174    	; 0x139c <GPIO_writePin+0x1c6>
				}
				break;
			case PORTC_ID:
				if(value == LOGIC_HIGH)
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	a1 f4       	brne	.+40     	; 0x131c <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC_ID_REG,pin_num);
    12f4:	a5 e3       	ldi	r26, 0x35	; 53
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e5 e3       	ldi	r30, 0x35	; 53
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <GPIO_writePin+0x13c>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <GPIO_writePin+0x138>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	40 c0       	rjmp	.+128    	; 0x139c <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC_ID_REG,pin_num);
    131c:	a5 e3       	ldi	r26, 0x35	; 53
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e5 e3       	ldi	r30, 0x35	; 53
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_writePin+0x164>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_writePin+0x160>
    133e:	80 95       	com	r24
    1340:	84 23       	and	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	2b c0       	rjmp	.+86     	; 0x139c <GPIO_writePin+0x1c6>
				}
				break;
			case PORTD_ID:
				if(value == LOGIC_HIGH)
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	a1 f4       	brne	.+40     	; 0x1374 <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD_ID_REG,pin_num);
    134c:	a2 e3       	ldi	r26, 0x32	; 50
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e2 e3       	ldi	r30, 0x32	; 50
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <GPIO_writePin+0x194>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <GPIO_writePin+0x190>
    136e:	84 2b       	or	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	14 c0       	rjmp	.+40     	; 0x139c <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD_ID_REG,pin_num);
    1374:	a2 e3       	ldi	r26, 0x32	; 50
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e2 e3       	ldi	r30, 0x32	; 50
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <GPIO_writePin+0x1bc>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <GPIO_writePin+0x1b8>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <GPIO_readPin>:
/*** Implementation of function, use to read the pin value***/
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <GPIO_readPin+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <GPIO_readPin+0x8>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	8a 83       	std	Y+2, r24	; 0x02
    13bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value = 0;
    13be:	19 82       	std	Y+1, r1	; 0x01
	if(!((port_num > 3) || (pin_num > 7)))
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	84 30       	cpi	r24, 0x04	; 4
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <GPIO_readPin+0x1c>
    13c6:	6b c0       	rjmp	.+214    	; 0x149e <GPIO_readPin+0xf2>
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	88 30       	cpi	r24, 0x08	; 8
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <GPIO_readPin+0x24>
    13ce:	67 c0       	rjmp	.+206    	; 0x149e <GPIO_readPin+0xf2>
	{
		switch(port_num)
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3d 83       	std	Y+5, r19	; 0x05
    13d8:	2c 83       	std	Y+4, r18	; 0x04
    13da:	4c 81       	ldd	r20, Y+4	; 0x04
    13dc:	5d 81       	ldd	r21, Y+5	; 0x05
    13de:	41 30       	cpi	r20, 0x01	; 1
    13e0:	51 05       	cpc	r21, r1
    13e2:	41 f1       	breq	.+80     	; 0x1434 <GPIO_readPin+0x88>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	91 05       	cpc	r25, r1
    13ec:	34 f4       	brge	.+12     	; 0x13fa <GPIO_readPin+0x4e>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	21 15       	cp	r18, r1
    13f4:	31 05       	cpc	r19, r1
    13f6:	61 f0       	breq	.+24     	; 0x1410 <GPIO_readPin+0x64>
    13f8:	52 c0       	rjmp	.+164    	; 0x149e <GPIO_readPin+0xf2>
    13fa:	4c 81       	ldd	r20, Y+4	; 0x04
    13fc:	5d 81       	ldd	r21, Y+5	; 0x05
    13fe:	42 30       	cpi	r20, 0x02	; 2
    1400:	51 05       	cpc	r21, r1
    1402:	51 f1       	breq	.+84     	; 0x1458 <GPIO_readPin+0xac>
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	91 05       	cpc	r25, r1
    140c:	b9 f1       	breq	.+110    	; 0x147c <GPIO_readPin+0xd0>
    140e:	47 c0       	rjmp	.+142    	; 0x149e <GPIO_readPin+0xf2>
		{
			case PORTA_ID:
						value = READ_BIT(PINA_ID_REG,pin_num);
    1410:	e9 e3       	ldi	r30, 0x39	; 57
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a9 01       	movw	r20, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <GPIO_readPin+0x7c>
    1424:	55 95       	asr	r21
    1426:	47 95       	ror	r20
    1428:	8a 95       	dec	r24
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <GPIO_readPin+0x78>
    142c:	ca 01       	movw	r24, r20
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	35 c0       	rjmp	.+106    	; 0x149e <GPIO_readPin+0xf2>
				break;
			case PORTB_ID:
				value = READ_BIT(PINB_ID_REG,pin_num);
    1434:	e6 e3       	ldi	r30, 0x36	; 54
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a9 01       	movw	r20, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <GPIO_readPin+0xa0>
    1448:	55 95       	asr	r21
    144a:	47 95       	ror	r20
    144c:	8a 95       	dec	r24
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <GPIO_readPin+0x9c>
    1450:	ca 01       	movw	r24, r20
    1452:	81 70       	andi	r24, 0x01	; 1
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	23 c0       	rjmp	.+70     	; 0x149e <GPIO_readPin+0xf2>
				break;
			case PORTC_ID:
				value = READ_BIT(PINC_ID_REG,pin_num);
    1458:	e3 e3       	ldi	r30, 0x33	; 51
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a9 01       	movw	r20, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_readPin+0xc4>
    146c:	55 95       	asr	r21
    146e:	47 95       	ror	r20
    1470:	8a 95       	dec	r24
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_readPin+0xc0>
    1474:	ca 01       	movw	r24, r20
    1476:	81 70       	andi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	11 c0       	rjmp	.+34     	; 0x149e <GPIO_readPin+0xf2>
				break;
			case PORTD_ID:
				value = READ_BIT(PIND_ID_REG,pin_num);
    147c:	e0 e3       	ldi	r30, 0x30	; 48
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a9 01       	movw	r20, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_readPin+0xe8>
    1490:	55 95       	asr	r21
    1492:	47 95       	ror	r20
    1494:	8a 95       	dec	r24
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_readPin+0xe4>
    1498:	ca 01       	movw	r24, r20
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return value;
    149e:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <GPIO_setupPortDirection>:
/*** Implementation of function, use to determine the port mode***/
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDircetonType direction)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <GPIO_setupPortDirection+0x6>
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <GPIO_setupPortDirection+0x8>
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	6a 83       	std	Y+2, r22	; 0x02
	if(!(port_num > 3))
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	84 30       	cpi	r24, 0x04	; 4
    14c4:	08 f0       	brcs	.+2      	; 0x14c8 <GPIO_setupPortDirection+0x18>
    14c6:	4e c0       	rjmp	.+156    	; 0x1564 <GPIO_setupPortDirection+0xb4>
	{
		switch(port_num)
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3c 83       	std	Y+4, r19	; 0x04
    14d0:	2b 83       	std	Y+3, r18	; 0x03
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	91 05       	cpc	r25, r1
    14da:	09 f1       	breq	.+66     	; 0x151e <GPIO_setupPortDirection+0x6e>
    14dc:	2b 81       	ldd	r18, Y+3	; 0x03
    14de:	3c 81       	ldd	r19, Y+4	; 0x04
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	2c f4       	brge	.+10     	; 0x14f0 <GPIO_setupPortDirection+0x40>
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	61 f0       	breq	.+24     	; 0x1506 <GPIO_setupPortDirection+0x56>
    14ee:	3a c0       	rjmp	.+116    	; 0x1564 <GPIO_setupPortDirection+0xb4>
    14f0:	2b 81       	ldd	r18, Y+3	; 0x03
    14f2:	3c 81       	ldd	r19, Y+4	; 0x04
    14f4:	22 30       	cpi	r18, 0x02	; 2
    14f6:	31 05       	cpc	r19, r1
    14f8:	f1 f0       	breq	.+60     	; 0x1536 <GPIO_setupPortDirection+0x86>
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	83 30       	cpi	r24, 0x03	; 3
    1500:	91 05       	cpc	r25, r1
    1502:	29 f1       	breq	.+74     	; 0x154e <GPIO_setupPortDirection+0x9e>
    1504:	2f c0       	rjmp	.+94     	; 0x1564 <GPIO_setupPortDirection+0xb4>
		{
			case PORTA_ID:
				if(direction == PORT_OUTPUT)
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	8f 3f       	cpi	r24, 0xFF	; 255
    150a:	29 f4       	brne	.+10     	; 0x1516 <GPIO_setupPortDirection+0x66>
				{
					DDRA_ID_REG = 0XFF;
    150c:	ea e3       	ldi	r30, 0x3A	; 58
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	80 83       	st	Z, r24
    1514:	27 c0       	rjmp	.+78     	; 0x1564 <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRA_ID_REG = 0;
    1516:	ea e3       	ldi	r30, 0x3A	; 58
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	10 82       	st	Z, r1
    151c:	23 c0       	rjmp	.+70     	; 0x1564 <GPIO_setupPortDirection+0xb4>
				}
				break;
			case PORTB_ID:
				if(direction == PORT_OUTPUT)
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	8f 3f       	cpi	r24, 0xFF	; 255
    1522:	29 f4       	brne	.+10     	; 0x152e <GPIO_setupPortDirection+0x7e>
				{
					DDRB_ID_REG = 0XFF;
    1524:	e7 e3       	ldi	r30, 0x37	; 55
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	80 83       	st	Z, r24
    152c:	1b c0       	rjmp	.+54     	; 0x1564 <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRB_ID_REG = 0;
    152e:	e7 e3       	ldi	r30, 0x37	; 55
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	10 82       	st	Z, r1
    1534:	17 c0       	rjmp	.+46     	; 0x1564 <GPIO_setupPortDirection+0xb4>
				}
				break;

			case PORTC_ID:
				if(direction == PORT_OUTPUT)
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	8f 3f       	cpi	r24, 0xFF	; 255
    153a:	29 f4       	brne	.+10     	; 0x1546 <GPIO_setupPortDirection+0x96>
				{
					DDRC_ID_REG = 0XFF;
    153c:	e4 e3       	ldi	r30, 0x34	; 52
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8f ef       	ldi	r24, 0xFF	; 255
    1542:	80 83       	st	Z, r24
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRC_ID_REG = 0;
    1546:	e4 e3       	ldi	r30, 0x34	; 52
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	10 82       	st	Z, r1
    154c:	0b c0       	rjmp	.+22     	; 0x1564 <GPIO_setupPortDirection+0xb4>
				}
				break;
			case PORTD_ID:
				if(direction == PORT_OUTPUT)
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	8f 3f       	cpi	r24, 0xFF	; 255
    1552:	29 f4       	brne	.+10     	; 0x155e <GPIO_setupPortDirection+0xae>
				{
					DDRD_ID_REG = 0XFF;
    1554:	e1 e3       	ldi	r30, 0x31	; 49
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	80 83       	st	Z, r24
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRD_ID_REG = 0;
    155e:	e1 e3       	ldi	r30, 0x31	; 49
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	10 82       	st	Z, r1
				}
				break;

		}
	}
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <GPIO_writePort>:
/*** Implementation of function, use to write the port value***/
void GPIO_writePort(uint8 port_num,uint8 value)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <GPIO_writePort+0x6>
    1578:	00 d0       	rcall	.+0      	; 0x157a <GPIO_writePort+0x8>
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	6a 83       	std	Y+2, r22	; 0x02
	if(!(port_num > 3))
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	84 30       	cpi	r24, 0x04	; 4
    1586:	90 f5       	brcc	.+100    	; 0x15ec <GPIO_writePort+0x7a>
	{
		switch(port_num)
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	3c 83       	std	Y+4, r19	; 0x04
    1590:	2b 83       	std	Y+3, r18	; 0x03
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	91 05       	cpc	r25, r1
    159a:	d1 f0       	breq	.+52     	; 0x15d0 <GPIO_writePort+0x5e>
    159c:	2b 81       	ldd	r18, Y+3	; 0x03
    159e:	3c 81       	ldd	r19, Y+4	; 0x04
    15a0:	22 30       	cpi	r18, 0x02	; 2
    15a2:	31 05       	cpc	r19, r1
    15a4:	2c f4       	brge	.+10     	; 0x15b0 <GPIO_writePort+0x3e>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	61 f0       	breq	.+24     	; 0x15c6 <GPIO_writePort+0x54>
    15ae:	1e c0       	rjmp	.+60     	; 0x15ec <GPIO_writePort+0x7a>
    15b0:	2b 81       	ldd	r18, Y+3	; 0x03
    15b2:	3c 81       	ldd	r19, Y+4	; 0x04
    15b4:	22 30       	cpi	r18, 0x02	; 2
    15b6:	31 05       	cpc	r19, r1
    15b8:	81 f0       	breq	.+32     	; 0x15da <GPIO_writePort+0x68>
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	91 05       	cpc	r25, r1
    15c2:	81 f0       	breq	.+32     	; 0x15e4 <GPIO_writePort+0x72>
    15c4:	13 c0       	rjmp	.+38     	; 0x15ec <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA_ID_REG = value;
    15c6:	eb e3       	ldi	r30, 0x3B	; 59
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	80 83       	st	Z, r24
    15ce:	0e c0       	rjmp	.+28     	; 0x15ec <GPIO_writePort+0x7a>
				break;
			case PORTB_ID:
				PORTB_ID_REG = value;
    15d0:	e8 e3       	ldi	r30, 0x38	; 56
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	80 83       	st	Z, r24
    15d8:	09 c0       	rjmp	.+18     	; 0x15ec <GPIO_writePort+0x7a>
				break;

			case PORTC_ID:
				PORTC_ID_REG = value;
    15da:	e5 e3       	ldi	r30, 0x35	; 53
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	80 83       	st	Z, r24
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <GPIO_writePort+0x7a>
				break;
			case PORTD_ID:
				PORTD_ID_REG = value;
    15e4:	e2 e3       	ldi	r30, 0x32	; 50
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	80 83       	st	Z, r24
				break;

		}
	}
}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <GPIO_readPort>:
/*** Implementation of function, use to read the port value***/
uint8 GPIO_readPort(uint8 port_num)
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <GPIO_readPort+0x6>
    1600:	00 d0       	rcall	.+0      	; 0x1602 <GPIO_readPort+0x8>
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = 0;
    1608:	19 82       	std	Y+1, r1	; 0x01
	if(!(port_num > 3))
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	84 30       	cpi	r24, 0x04	; 4
    160e:	90 f5       	brcc	.+100    	; 0x1674 <GPIO_readPort+0x7a>
	{
		switch(port_num)
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	3c 83       	std	Y+4, r19	; 0x04
    1618:	2b 83       	std	Y+3, r18	; 0x03
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	91 05       	cpc	r25, r1
    1622:	d1 f0       	breq	.+52     	; 0x1658 <GPIO_readPort+0x5e>
    1624:	2b 81       	ldd	r18, Y+3	; 0x03
    1626:	3c 81       	ldd	r19, Y+4	; 0x04
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	2c f4       	brge	.+10     	; 0x1638 <GPIO_readPort+0x3e>
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	61 f0       	breq	.+24     	; 0x164e <GPIO_readPort+0x54>
    1636:	1e c0       	rjmp	.+60     	; 0x1674 <GPIO_readPort+0x7a>
    1638:	2b 81       	ldd	r18, Y+3	; 0x03
    163a:	3c 81       	ldd	r19, Y+4	; 0x04
    163c:	22 30       	cpi	r18, 0x02	; 2
    163e:	31 05       	cpc	r19, r1
    1640:	81 f0       	breq	.+32     	; 0x1662 <GPIO_readPort+0x68>
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	91 05       	cpc	r25, r1
    164a:	81 f0       	breq	.+32     	; 0x166c <GPIO_readPort+0x72>
    164c:	13 c0       	rjmp	.+38     	; 0x1674 <GPIO_readPort+0x7a>
		{
			case PORTA_ID:
				value = PINA_ID_REG;
    164e:	e9 e3       	ldi	r30, 0x39	; 57
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	0e c0       	rjmp	.+28     	; 0x1674 <GPIO_readPort+0x7a>
				break;
			case PORTB_ID:
				value = PINB_ID_REG;
    1658:	e6 e3       	ldi	r30, 0x36	; 54
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	09 c0       	rjmp	.+18     	; 0x1674 <GPIO_readPort+0x7a>
				break;
			case PORTC_ID:
				value = PINC_ID_REG;
    1662:	e3 e3       	ldi	r30, 0x33	; 51
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <GPIO_readPort+0x7a>
				break;
			case PORTD_ID:
				value = PIND_ID_REG;
    166c:	e0 e3       	ldi	r30, 0x30	; 48
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return value;
    1674:	89 81       	ldd	r24, Y+1	; 0x01
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <GLOBAL_interruptEnable>:

#include"global.h"
#include "../../UTILS/common_macro.h"

void GLOBAL_interruptEnable(void)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GLOB_INT_REGISTER,GLOB_INT_BIT);
    168c:	af e5       	ldi	r26, 0x5F	; 95
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	ef e5       	ldi	r30, 0x5F	; 95
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	80 68       	ori	r24, 0x80	; 128
    1698:	8c 93       	st	X, r24
}
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret

000016a0 <GLOBAL_interruptDisable>:
void GLOBAL_interruptDisable(void)
{
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GLOB_INT_REGISTER,GLOB_INT_BIT);
    16a8:	af e5       	ldi	r26, 0x5F	; 95
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	ef e5       	ldi	r30, 0x5F	; 95
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	8f 77       	andi	r24, 0x7F	; 127
    16b4:	8c 93       	st	X, r24
}
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <ADC_init>:
#include "../GPIO/gpio.h"
/*** Global variable for ADC Reading value *************/
volatile uint16 g_adcResult = 0;
/**** The implementation of ADC initial function ************/
uint8 ADC_init(uint8 channel)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <ADC_init+0x6>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	8a 83       	std	Y+2, r24	; 0x02
	/*** This object use for error detection ***/
	uint8 Error_state = NOTOK;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	89 83       	std	Y+1, r24	; 0x01
	/*** Check the input value of channels ***/
	if((channel >= CH0) && (channel <= CH7))
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	88 30       	cpi	r24, 0x08	; 8
    16d0:	90 f4       	brcc	.+36     	; 0x16f6 <ADC_init+0x3a>
	{
		/*** Set direction for ADC channel ***/
		GPIO_setupPinDirection(ADC_PORT_CONNECTION,channel,PIN_INPUT);
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	6a 81       	ldd	r22, Y+2	; 0x02
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
		/*** Set the configuration of ADC ***/
		/*** Clear the ADC data register ***/
		ADC_DATA_REG = 0;
    16dc:	e4 e2       	ldi	r30, 0x24	; 36
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	11 82       	std	Z+1, r1	; 0x01
    16e2:	10 82       	st	Z, r1
		 * Set the input clock for ADC.
		 * Set the ADC interrupt state.
		 * Disable the Auto Trigger.
		 * Disable the Left Adjust Result.
		 */
		ADC_MUX_SELE_REG = (ADC_VOLTAGE_REFE_SOURCE);
    16e4:	e7 e2       	ldi	r30, 0x27	; 39
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 e4       	ldi	r24, 0x40	; 64
    16ea:	80 83       	st	Z, r24
		ADC_CTL_STATUS_REG = (ADC_ENABLE_BIT7) | (ADC_CLK_SELE) | (ADC_INTERRUT_STATE);
    16ec:	e6 e2       	ldi	r30, 0x26	; 38
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	83 e8       	ldi	r24, 0x83	; 131
    16f2:	80 83       	st	Z, r24
		Error_state = OK;
    16f4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Error_state;
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <ADC_readChannel>:
/**** The implementation of ADC read the selected channel function *****/
uint8 ADC_readChannel(uint8 channel)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <ADC_readChannel+0x6>
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	8a 83       	std	Y+2, r24	; 0x02
	/*** This object use for error detection ***/
	uint8 Error_state = NOTOK;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	89 83       	std	Y+1, r24	; 0x01
	/*** Check the input value of channels ***/
	if((channel >= CH0) && (channel <= CH7) )
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	88 30       	cpi	r24, 0x08	; 8
    1716:	58 f5       	brcc	.+86     	; 0x176e <ADC_readChannel+0x6c>
	{
		/*** Set the selection channel ***/
		ADC_MUX_SELE_REG = (ADC_MUX_SELE_REG & 0XE0) | (channel & 0X07);
    1718:	a7 e2       	ldi	r26, 0x27	; 39
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e7 e2       	ldi	r30, 0x27	; 39
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	98 2f       	mov	r25, r24
    1724:	90 7e       	andi	r25, 0xE0	; 224
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	87 70       	andi	r24, 0x07	; 7
    172a:	89 2b       	or	r24, r25
    172c:	8c 93       	st	X, r24
		/*** Set the ADC module to start conversion ***/
		ADC_CTL_STATUS_REG |= (ADC_START_CONVERSION_BIT6);
    172e:	a6 e2       	ldi	r26, 0x26	; 38
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e6 e2       	ldi	r30, 0x26	; 38
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	80 64       	ori	r24, 0x40	; 64
    173a:	8c 93       	st	X, r24
		/*** Select the polling  or interrupt technique to read conversion value ***/
#if ADC_INTERRUT_STATE == ADC_INTERRUPT_DISABLE
		/*** Stuck at ADC rise its flag ****/
		while(!(((ADC_CTL_STATUS_REG & ADC_INT_FLAG_BIT4) >> 0x04) & 0X01));
    173c:	e6 e2       	ldi	r30, 0x26	; 38
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	80 71       	andi	r24, 0x10	; 16
    1748:	90 70       	andi	r25, 0x00	; 0
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	b9 f3       	breq	.-18     	; 0x173c <ADC_readChannel+0x3a>
		/*** Clear the flag by set it by one ***/
		ADC_CTL_STATUS_REG |= (ADC_INT_FLAG_BIT4);
    174e:	a6 e2       	ldi	r26, 0x26	; 38
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e6 e2       	ldi	r30, 0x26	; 38
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	80 61       	ori	r24, 0x10	; 16
    175a:	8c 93       	st	X, r24
		/*** Up_data the Global resource ***/
		g_adcResult = ADC_DATA_REG;
    175c:	e4 e2       	ldi	r30, 0x24	; 36
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	90 93 9d 01 	sts	0x019D, r25
    1768:	80 93 9c 01 	sts	0x019C, r24
#endif
		Error_state = OK;
    176c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Error_state;
    176e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <LM35_getTemperature>:
***************** SW_component: LM35 Temperature sensor Drive ***************
***************** Date:  29/8/2023 ******************************************
*/
#include "lm35_temperature_interface.h"
uint8 LM35_getTemperature(void)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
	uint8 tem_value = 0;
    1784:	19 82       	std	Y+1, r1	; 0x01
	ADC_readChannel(SENSOR_CHANNEL_ID);
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	0e 94 81 0b 	call	0x1702	; 0x1702 <ADC_readChannel>
	tem_value = (uint8)(((uint32)g_adcResult * SENSOR_MAX_TEMPERATURE * VOLTAGE_REFFERNCE) / (SENSOR_MAX_VOLT_VALUE * ADC_MAXIMUM_VALUE));
    178c:	80 91 9c 01 	lds	r24, 0x019C
    1790:	90 91 9d 01 	lds	r25, 0x019D
    1794:	cc 01       	movw	r24, r24
    1796:	a0 e0       	ldi	r26, 0x00	; 0
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	2e ee       	ldi	r18, 0xEE	; 238
    179c:	32 e0       	ldi	r19, 0x02	; 2
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	bc 01       	movw	r22, r24
    17a4:	cd 01       	movw	r24, r26
    17a6:	0e 94 0f 14 	call	0x281e	; 0x281e <__mulsi3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	bc 01       	movw	r22, r24
    17bc:	cd 01       	movw	r24, r26
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 ec       	ldi	r20, 0xC0	; 192
    17c4:	54 e4       	ldi	r21, 0x44	; 68
    17c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	89 83       	std	Y+1, r24	; 0x01
	return tem_value;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <LCD_init>:
#include"lcd.h"
#include"../../MCAL/GPIO/gpio.h"
#include<util/delay.h>
#include"../../UTILS/common_macro.h"
void LCD_init(void)
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	aa 97       	sbiw	r28, 0x2a	; 42
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN,PIN_OUTPUT);
    17fa:	83 e0       	ldi	r24, 0x03	; 3
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT_ID,LCD_EN_PIN,PIN_OUTPUT);
    1804:	83 e0       	ldi	r24, 0x03	; 3
    1806:	62 e0       	ldi	r22, 0x02	; 2
    1808:	41 e0       	ldi	r20, 0x01	; 1
    180a:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
#if LCD_DATA_MODE == 8
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	6f ef       	ldi	r22, 0xFF	; 255
    1812:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_setupPortDirection>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a0 ea       	ldi	r26, 0xA0	; 160
    181c:	b1 e4       	ldi	r27, 0x41	; 65
    181e:	8f a3       	std	Y+39, r24	; 0x27
    1820:	98 a7       	std	Y+40, r25	; 0x28
    1822:	a9 a7       	std	Y+41, r26	; 0x29
    1824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1826:	6f a1       	ldd	r22, Y+39	; 0x27
    1828:	78 a5       	ldd	r23, Y+40	; 0x28
    182a:	89 a5       	ldd	r24, Y+41	; 0x29
    182c:	9a a5       	ldd	r25, Y+42	; 0x2a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a e7       	ldi	r20, 0x7A	; 122
    1834:	53 e4       	ldi	r21, 0x43	; 67
    1836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	8b a3       	std	Y+35, r24	; 0x23
    1840:	9c a3       	std	Y+36, r25	; 0x24
    1842:	ad a3       	std	Y+37, r26	; 0x25
    1844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1846:	6b a1       	ldd	r22, Y+35	; 0x23
    1848:	7c a1       	ldd	r23, Y+36	; 0x24
    184a:	8d a1       	ldd	r24, Y+37	; 0x25
    184c:	9e a1       	ldd	r25, Y+38	; 0x26
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	5f e3       	ldi	r21, 0x3F	; 63
    1856:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    185a:	88 23       	and	r24, r24
    185c:	2c f4       	brge	.+10     	; 0x1868 <LCD_init+0x82>
		__ticks = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9a a3       	std	Y+34, r25	; 0x22
    1864:	89 a3       	std	Y+33, r24	; 0x21
    1866:	3f c0       	rjmp	.+126    	; 0x18e6 <LCD_init+0x100>
	else if (__tmp > 65535)
    1868:	6b a1       	ldd	r22, Y+35	; 0x23
    186a:	7c a1       	ldd	r23, Y+36	; 0x24
    186c:	8d a1       	ldd	r24, Y+37	; 0x25
    186e:	9e a1       	ldd	r25, Y+38	; 0x26
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	4c f5       	brge	.+82     	; 0x18d2 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1880:	6f a1       	ldd	r22, Y+39	; 0x27
    1882:	78 a5       	ldd	r23, Y+40	; 0x28
    1884:	89 a5       	ldd	r24, Y+41	; 0x29
    1886:	9a a5       	ldd	r25, Y+42	; 0x2a
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e2       	ldi	r20, 0x20	; 32
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9a a3       	std	Y+34, r25	; 0x22
    18a6:	89 a3       	std	Y+33, r24	; 0x21
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <LCD_init+0xe2>
    18aa:	89 e1       	ldi	r24, 0x19	; 25
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	98 a3       	std	Y+32, r25	; 0x20
    18b0:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18b4:	98 a1       	ldd	r25, Y+32	; 0x20
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <LCD_init+0xd0>
    18ba:	98 a3       	std	Y+32, r25	; 0x20
    18bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	89 a1       	ldd	r24, Y+33	; 0x21
    18c0:	9a a1       	ldd	r25, Y+34	; 0x22
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	9a a3       	std	Y+34, r25	; 0x22
    18c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	89 a1       	ldd	r24, Y+33	; 0x21
    18ca:	9a a1       	ldd	r25, Y+34	; 0x22
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	69 f7       	brne	.-38     	; 0x18aa <LCD_init+0xc4>
    18d0:	14 c0       	rjmp	.+40     	; 0x18fa <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	6b a1       	ldd	r22, Y+35	; 0x23
    18d4:	7c a1       	ldd	r23, Y+36	; 0x24
    18d6:	8d a1       	ldd	r24, Y+37	; 0x25
    18d8:	9e a1       	ldd	r25, Y+38	; 0x26
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9a a3       	std	Y+34, r25	; 0x22
    18e4:	89 a3       	std	Y+33, r24	; 0x21
    18e6:	89 a1       	ldd	r24, Y+33	; 0x21
    18e8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ea:	9e 8f       	std	Y+30, r25	; 0x1e
    18ec:	8d 8f       	std	Y+29, r24	; 0x1d
    18ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <LCD_init+0x10c>
    18f6:	9e 8f       	std	Y+30, r25	; 0x1e
    18f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	// 8 bits mode
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    18fa:	88 e3       	ldi	r24, 0x38	; 56
    18fc:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_sendCommand>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a0 e8       	ldi	r26, 0x80	; 128
    1906:	bf e3       	ldi	r27, 0x3F	; 63
    1908:	89 8f       	std	Y+25, r24	; 0x19
    190a:	9a 8f       	std	Y+26, r25	; 0x1a
    190c:	ab 8f       	std	Y+27, r26	; 0x1b
    190e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1910:	69 8d       	ldd	r22, Y+25	; 0x19
    1912:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1914:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1916:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4a e7       	ldi	r20, 0x7A	; 122
    191e:	53 e4       	ldi	r21, 0x43	; 67
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	8d 8b       	std	Y+21, r24	; 0x15
    192a:	9e 8b       	std	Y+22, r25	; 0x16
    192c:	af 8b       	std	Y+23, r26	; 0x17
    192e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1930:	6d 89       	ldd	r22, Y+21	; 0x15
    1932:	7e 89       	ldd	r23, Y+22	; 0x16
    1934:	8f 89       	ldd	r24, Y+23	; 0x17
    1936:	98 8d       	ldd	r25, Y+24	; 0x18
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1944:	88 23       	and	r24, r24
    1946:	2c f4       	brge	.+10     	; 0x1952 <LCD_init+0x16c>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9c 8b       	std	Y+20, r25	; 0x14
    194e:	8b 8b       	std	Y+19, r24	; 0x13
    1950:	3f c0       	rjmp	.+126    	; 0x19d0 <LCD_init+0x1ea>
	else if (__tmp > 65535)
    1952:	6d 89       	ldd	r22, Y+21	; 0x15
    1954:	7e 89       	ldd	r23, Y+22	; 0x16
    1956:	8f 89       	ldd	r24, Y+23	; 0x17
    1958:	98 8d       	ldd	r25, Y+24	; 0x18
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	4c f5       	brge	.+82     	; 0x19bc <LCD_init+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	69 8d       	ldd	r22, Y+25	; 0x19
    196c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    196e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e2       	ldi	r20, 0x20	; 32
    1978:	51 e4       	ldi	r21, 0x41	; 65
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9c 8b       	std	Y+20, r25	; 0x14
    1990:	8b 8b       	std	Y+19, r24	; 0x13
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <LCD_init+0x1cc>
    1994:	89 e1       	ldi	r24, 0x19	; 25
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9a 8b       	std	Y+18, r25	; 0x12
    199a:	89 8b       	std	Y+17, r24	; 0x11
    199c:	89 89       	ldd	r24, Y+17	; 0x11
    199e:	9a 89       	ldd	r25, Y+18	; 0x12
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_init+0x1ba>
    19a4:	9a 8b       	std	Y+18, r25	; 0x12
    19a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	8b 89       	ldd	r24, Y+19	; 0x13
    19aa:	9c 89       	ldd	r25, Y+20	; 0x14
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9c 8b       	std	Y+20, r25	; 0x14
    19b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	8b 89       	ldd	r24, Y+19	; 0x13
    19b4:	9c 89       	ldd	r25, Y+20	; 0x14
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	69 f7       	brne	.-38     	; 0x1994 <LCD_init+0x1ae>
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <LCD_init+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19bc:	6d 89       	ldd	r22, Y+21	; 0x15
    19be:	7e 89       	ldd	r23, Y+22	; 0x16
    19c0:	8f 89       	ldd	r24, Y+23	; 0x17
    19c2:	98 8d       	ldd	r25, Y+24	; 0x18
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9c 8b       	std	Y+20, r25	; 0x14
    19ce:	8b 8b       	std	Y+19, r24	; 0x13
    19d0:	8b 89       	ldd	r24, Y+19	; 0x13
    19d2:	9c 89       	ldd	r25, Y+20	; 0x14
    19d4:	98 8b       	std	Y+16, r25	; 0x10
    19d6:	8f 87       	std	Y+15, r24	; 0x0f
    19d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19da:	98 89       	ldd	r25, Y+16	; 0x10
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_init+0x1f6>
    19e0:	98 8b       	std	Y+16, r25	; 0x10
    19e2:	8f 87       	std	Y+15, r24	; 0x0f
	// 4 bits mode
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	_delay_ms(1);
	//disable cursor
	LCD_sendCommand(LCD_CURSOR_OFF);
    19e4:	8c e0       	ldi	r24, 0x0C	; 12
    19e6:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_sendCommand>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a0 e8       	ldi	r26, 0x80	; 128
    19f0:	bf e3       	ldi	r27, 0x3F	; 63
    19f2:	8b 87       	std	Y+11, r24	; 0x0b
    19f4:	9c 87       	std	Y+12, r25	; 0x0c
    19f6:	ad 87       	std	Y+13, r26	; 0x0d
    19f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	4a e7       	ldi	r20, 0x7A	; 122
    1a08:	53 e4       	ldi	r21, 0x43	; 67
    1a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	8f 83       	std	Y+7, r24	; 0x07
    1a14:	98 87       	std	Y+8, r25	; 0x08
    1a16:	a9 87       	std	Y+9, r26	; 0x09
    1a18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1c:	78 85       	ldd	r23, Y+8	; 0x08
    1a1e:	89 85       	ldd	r24, Y+9	; 0x09
    1a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e8       	ldi	r20, 0x80	; 128
    1a28:	5f e3       	ldi	r21, 0x3F	; 63
    1a2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a2e:	88 23       	and	r24, r24
    1a30:	2c f4       	brge	.+10     	; 0x1a3c <LCD_init+0x256>
		__ticks = 1;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9e 83       	std	Y+6, r25	; 0x06
    1a38:	8d 83       	std	Y+5, r24	; 0x05
    1a3a:	3f c0       	rjmp	.+126    	; 0x1aba <LCD_init+0x2d4>
	else if (__tmp > 65535)
    1a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3e:	78 85       	ldd	r23, Y+8	; 0x08
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	3f ef       	ldi	r19, 0xFF	; 255
    1a48:	4f e7       	ldi	r20, 0x7F	; 127
    1a4a:	57 e4       	ldi	r21, 0x47	; 71
    1a4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a50:	18 16       	cp	r1, r24
    1a52:	4c f5       	brge	.+82     	; 0x1aa6 <LCD_init+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e2       	ldi	r20, 0x20	; 32
    1a62:	51 e4       	ldi	r21, 0x41	; 65
    1a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	cd 01       	movw	r24, r26
    1a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	9e 83       	std	Y+6, r25	; 0x06
    1a7a:	8d 83       	std	Y+5, r24	; 0x05
    1a7c:	0f c0       	rjmp	.+30     	; 0x1a9c <LCD_init+0x2b6>
    1a7e:	89 e1       	ldi	r24, 0x19	; 25
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	9c 83       	std	Y+4, r25	; 0x04
    1a84:	8b 83       	std	Y+3, r24	; 0x03
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <LCD_init+0x2a4>
    1a8e:	9c 83       	std	Y+4, r25	; 0x04
    1a90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	9e 83       	std	Y+6, r25	; 0x06
    1a9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	69 f7       	brne	.-38     	; 0x1a7e <LCD_init+0x298>
    1aa4:	14 c0       	rjmp	.+40     	; 0x1ace <LCD_init+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa8:	78 85       	ldd	r23, Y+8	; 0x08
    1aaa:	89 85       	ldd	r24, Y+9	; 0x09
    1aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	9e 81       	ldd	r25, Y+6	; 0x06
    1abe:	9a 83       	std	Y+2, r25	; 0x02
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <LCD_init+0x2e0>
    1aca:	9a 83       	std	Y+2, r25	; 0x02
    1acc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	// clear lcd
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_sendCommand>

}
    1ad4:	aa 96       	adiw	r28, 0x2a	; 42
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <LCD_sendCommand>:
void LCD_sendCommand(uint8 com)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	e9 97       	sbiw	r28, 0x39	; 57
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN,LOGIC_LOW);
    1afc:	83 e0       	ldi	r24, 0x03	; 3
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	a0 e8       	ldi	r26, 0x80	; 128
    1b0c:	bf e3       	ldi	r27, 0x3F	; 63
    1b0e:	8d ab       	std	Y+53, r24	; 0x35
    1b10:	9e ab       	std	Y+54, r25	; 0x36
    1b12:	af ab       	std	Y+55, r26	; 0x37
    1b14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b16:	6d a9       	ldd	r22, Y+53	; 0x35
    1b18:	7e a9       	ldd	r23, Y+54	; 0x36
    1b1a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a e7       	ldi	r20, 0x7A	; 122
    1b24:	53 e4       	ldi	r21, 0x43	; 67
    1b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	89 ab       	std	Y+49, r24	; 0x31
    1b30:	9a ab       	std	Y+50, r25	; 0x32
    1b32:	ab ab       	std	Y+51, r26	; 0x33
    1b34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b36:	69 a9       	ldd	r22, Y+49	; 0x31
    1b38:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4a:	88 23       	and	r24, r24
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <LCD_sendCommand+0x72>
		__ticks = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	98 ab       	std	Y+48, r25	; 0x30
    1b54:	8f a7       	std	Y+47, r24	; 0x2f
    1b56:	3f c0       	rjmp	.+126    	; 0x1bd6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1b58:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	4f e7       	ldi	r20, 0x7F	; 127
    1b66:	57 e4       	ldi	r21, 0x47	; 71
    1b68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	4c f5       	brge	.+82     	; 0x1bc2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	6d a9       	ldd	r22, Y+53	; 0x35
    1b72:	7e a9       	ldd	r23, Y+54	; 0x36
    1b74:	8f a9       	ldd	r24, Y+55	; 0x37
    1b76:	98 ad       	ldd	r25, Y+56	; 0x38
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e2       	ldi	r20, 0x20	; 32
    1b7e:	51 e4       	ldi	r21, 0x41	; 65
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	98 ab       	std	Y+48, r25	; 0x30
    1b96:	8f a7       	std	Y+47, r24	; 0x2f
    1b98:	0f c0       	rjmp	.+30     	; 0x1bb8 <LCD_sendCommand+0xd2>
    1b9a:	89 e1       	ldi	r24, 0x19	; 25
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9e a7       	std	Y+46, r25	; 0x2e
    1ba0:	8d a7       	std	Y+45, r24	; 0x2d
    1ba2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ba4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <LCD_sendCommand+0xc0>
    1baa:	9e a7       	std	Y+46, r25	; 0x2e
    1bac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	98 ab       	std	Y+48, r25	; 0x30
    1bb6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bba:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	69 f7       	brne	.-38     	; 0x1b9a <LCD_sendCommand+0xb4>
    1bc0:	14 c0       	rjmp	.+40     	; 0x1bea <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	98 ab       	std	Y+48, r25	; 0x30
    1bd4:	8f a7       	std	Y+47, r24	; 0x2f
    1bd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bda:	9c a7       	std	Y+44, r25	; 0x2c
    1bdc:	8b a7       	std	Y+43, r24	; 0x2b
    1bde:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <LCD_sendCommand+0xfc>
    1be6:	9c a7       	std	Y+44, r25	; 0x2c
    1be8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN,LOGIC_HIGH);
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	62 e0       	ldi	r22, 0x02	; 2
    1bee:	41 e0       	ldi	r20, 0x01	; 1
    1bf0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	a0 e8       	ldi	r26, 0x80	; 128
    1bfa:	bf e3       	ldi	r27, 0x3F	; 63
    1bfc:	8f a3       	std	Y+39, r24	; 0x27
    1bfe:	98 a7       	std	Y+40, r25	; 0x28
    1c00:	a9 a7       	std	Y+41, r26	; 0x29
    1c02:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c04:	6f a1       	ldd	r22, Y+39	; 0x27
    1c06:	78 a5       	ldd	r23, Y+40	; 0x28
    1c08:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	4a e7       	ldi	r20, 0x7A	; 122
    1c12:	53 e4       	ldi	r21, 0x43	; 67
    1c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	8b a3       	std	Y+35, r24	; 0x23
    1c1e:	9c a3       	std	Y+36, r25	; 0x24
    1c20:	ad a3       	std	Y+37, r26	; 0x25
    1c22:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c24:	6b a1       	ldd	r22, Y+35	; 0x23
    1c26:	7c a1       	ldd	r23, Y+36	; 0x24
    1c28:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e8       	ldi	r20, 0x80	; 128
    1c32:	5f e3       	ldi	r21, 0x3F	; 63
    1c34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c38:	88 23       	and	r24, r24
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <LCD_sendCommand+0x160>
		__ticks = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9a a3       	std	Y+34, r25	; 0x22
    1c42:	89 a3       	std	Y+33, r24	; 0x21
    1c44:	3f c0       	rjmp	.+126    	; 0x1cc4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1c46:	6b a1       	ldd	r22, Y+35	; 0x23
    1c48:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	3f ef       	ldi	r19, 0xFF	; 255
    1c52:	4f e7       	ldi	r20, 0x7F	; 127
    1c54:	57 e4       	ldi	r21, 0x47	; 71
    1c56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c5a:	18 16       	cp	r1, r24
    1c5c:	4c f5       	brge	.+82     	; 0x1cb0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c60:	78 a5       	ldd	r23, Y+40	; 0x28
    1c62:	89 a5       	ldd	r24, Y+41	; 0x29
    1c64:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e2       	ldi	r20, 0x20	; 32
    1c6c:	51 e4       	ldi	r21, 0x41	; 65
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	bc 01       	movw	r22, r24
    1c78:	cd 01       	movw	r24, r26
    1c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9a a3       	std	Y+34, r25	; 0x22
    1c84:	89 a3       	std	Y+33, r24	; 0x21
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <LCD_sendCommand+0x1c0>
    1c88:	89 e1       	ldi	r24, 0x19	; 25
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	98 a3       	std	Y+32, r25	; 0x20
    1c8e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c92:	98 a1       	ldd	r25, Y+32	; 0x20
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <LCD_sendCommand+0x1ae>
    1c98:	98 a3       	std	Y+32, r25	; 0x20
    1c9a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	9a a3       	std	Y+34, r25	; 0x22
    1ca4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca8:	9a a1       	ldd	r25, Y+34	; 0x22
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	69 f7       	brne	.-38     	; 0x1c88 <LCD_sendCommand+0x1a2>
    1cae:	14 c0       	rjmp	.+40     	; 0x1cd8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9a a3       	std	Y+34, r25	; 0x22
    1cc2:	89 a3       	std	Y+33, r24	; 0x21
    1cc4:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc6:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc8:	9e 8f       	std	Y+30, r25	; 0x1e
    1cca:	8d 8f       	std	Y+29, r24	; 0x1d
    1ccc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_sendCommand+0x1ea>
    1cd4:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if LCD_DATA_MODE == 8
	GPIO_writePort(LCD_DATA_PORT_ID,com);
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	69 ad       	ldd	r22, Y+57	; 0x39
    1cdc:	0e 94 b9 0a 	call	0x1572	; 0x1572 <GPIO_writePort>
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a0 e8       	ldi	r26, 0x80	; 128
    1ce6:	bf e3       	ldi	r27, 0x3F	; 63
    1ce8:	89 8f       	std	Y+25, r24	; 0x19
    1cea:	9a 8f       	std	Y+26, r25	; 0x1a
    1cec:	ab 8f       	std	Y+27, r26	; 0x1b
    1cee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	4a e7       	ldi	r20, 0x7A	; 122
    1cfe:	53 e4       	ldi	r21, 0x43	; 67
    1d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	8d 8b       	std	Y+21, r24	; 0x15
    1d0a:	9e 8b       	std	Y+22, r25	; 0x16
    1d0c:	af 8b       	std	Y+23, r26	; 0x17
    1d0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d10:	6d 89       	ldd	r22, Y+21	; 0x15
    1d12:	7e 89       	ldd	r23, Y+22	; 0x16
    1d14:	8f 89       	ldd	r24, Y+23	; 0x17
    1d16:	98 8d       	ldd	r25, Y+24	; 0x18
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e8       	ldi	r20, 0x80	; 128
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	2c f4       	brge	.+10     	; 0x1d32 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9c 8b       	std	Y+20, r25	; 0x14
    1d2e:	8b 8b       	std	Y+19, r24	; 0x13
    1d30:	3f c0       	rjmp	.+126    	; 0x1db0 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1d32:	6d 89       	ldd	r22, Y+21	; 0x15
    1d34:	7e 89       	ldd	r23, Y+22	; 0x16
    1d36:	8f 89       	ldd	r24, Y+23	; 0x17
    1d38:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	3f ef       	ldi	r19, 0xFF	; 255
    1d3e:	4f e7       	ldi	r20, 0x7F	; 127
    1d40:	57 e4       	ldi	r21, 0x47	; 71
    1d42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d46:	18 16       	cp	r1, r24
    1d48:	4c f5       	brge	.+82     	; 0x1d9c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e2       	ldi	r20, 0x20	; 32
    1d58:	51 e4       	ldi	r21, 0x41	; 65
    1d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	bc 01       	movw	r22, r24
    1d64:	cd 01       	movw	r24, r26
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9c 8b       	std	Y+20, r25	; 0x14
    1d70:	8b 8b       	std	Y+19, r24	; 0x13
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <LCD_sendCommand+0x2ac>
    1d74:	89 e1       	ldi	r24, 0x19	; 25
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9a 8b       	std	Y+18, r25	; 0x12
    1d7a:	89 8b       	std	Y+17, r24	; 0x11
    1d7c:	89 89       	ldd	r24, Y+17	; 0x11
    1d7e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <LCD_sendCommand+0x29a>
    1d84:	9a 8b       	std	Y+18, r25	; 0x12
    1d86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d88:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	9c 8b       	std	Y+20, r25	; 0x14
    1d90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d92:	8b 89       	ldd	r24, Y+19	; 0x13
    1d94:	9c 89       	ldd	r25, Y+20	; 0x14
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	69 f7       	brne	.-38     	; 0x1d74 <LCD_sendCommand+0x28e>
    1d9a:	14 c0       	rjmp	.+40     	; 0x1dc4 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1da0:	8f 89       	ldd	r24, Y+23	; 0x17
    1da2:	98 8d       	ldd	r25, Y+24	; 0x18
    1da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	9c 8b       	std	Y+20, r25	; 0x14
    1dae:	8b 8b       	std	Y+19, r24	; 0x13
    1db0:	8b 89       	ldd	r24, Y+19	; 0x13
    1db2:	9c 89       	ldd	r25, Y+20	; 0x14
    1db4:	98 8b       	std	Y+16, r25	; 0x10
    1db6:	8f 87       	std	Y+15, r24	; 0x0f
    1db8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dba:	98 89       	ldd	r25, Y+16	; 0x10
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_sendCommand+0x2d6>
    1dc0:	98 8b       	std	Y+16, r25	; 0x10
    1dc2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN,LOGIC_LOW);
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	62 e0       	ldi	r22, 0x02	; 2
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a0 e8       	ldi	r26, 0x80	; 128
    1dd4:	bf e3       	ldi	r27, 0x3F	; 63
    1dd6:	8b 87       	std	Y+11, r24	; 0x0b
    1dd8:	9c 87       	std	Y+12, r25	; 0x0c
    1dda:	ad 87       	std	Y+13, r26	; 0x0d
    1ddc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	4a e7       	ldi	r20, 0x7A	; 122
    1dec:	53 e4       	ldi	r21, 0x43	; 67
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	8f 83       	std	Y+7, r24	; 0x07
    1df8:	98 87       	std	Y+8, r25	; 0x08
    1dfa:	a9 87       	std	Y+9, r26	; 0x09
    1dfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	5f e3       	ldi	r21, 0x3F	; 63
    1e0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e12:	88 23       	and	r24, r24
    1e14:	2c f4       	brge	.+10     	; 0x1e20 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
    1e1e:	3f c0       	rjmp	.+126    	; 0x1e9e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1e20:	6f 81       	ldd	r22, Y+7	; 0x07
    1e22:	78 85       	ldd	r23, Y+8	; 0x08
    1e24:	89 85       	ldd	r24, Y+9	; 0x09
    1e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	3f ef       	ldi	r19, 0xFF	; 255
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	57 e4       	ldi	r21, 0x47	; 71
    1e30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	4c f5       	brge	.+82     	; 0x1e8a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e2       	ldi	r20, 0x20	; 32
    1e46:	51 e4       	ldi	r21, 0x41	; 65
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <LCD_sendCommand+0x39a>
    1e62:	89 e1       	ldi	r24, 0x19	; 25
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9c 83       	std	Y+4, r25	; 0x04
    1e68:	8b 83       	std	Y+3, r24	; 0x03
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_sendCommand+0x388>
    1e72:	9c 83       	std	Y+4, r25	; 0x04
    1e74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	69 f7       	brne	.-38     	; 0x1e62 <LCD_sendCommand+0x37c>
    1e88:	14 c0       	rjmp	.+40     	; 0x1eb2 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8c:	78 85       	ldd	r23, Y+8	; 0x08
    1e8e:	89 85       	ldd	r24, Y+9	; 0x09
    1e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9e 83       	std	Y+6, r25	; 0x06
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <LCD_sendCommand+0x3c4>
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN7_ID,READ_BIT(com,3));
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN,LOGIC_LOW);
	_delay_ms(1);
#endif
}
    1eb2:	e9 96       	adiw	r28, 0x39	; 57
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data)
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	e9 97       	sbiw	r28, 0x39	; 57
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN,LOGIC_HIGH);
    1eda:	83 e0       	ldi	r24, 0x03	; 3
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	41 e0       	ldi	r20, 0x01	; 1
    1ee0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a0 e8       	ldi	r26, 0x80	; 128
    1eea:	bf e3       	ldi	r27, 0x3F	; 63
    1eec:	8d ab       	std	Y+53, r24	; 0x35
    1eee:	9e ab       	std	Y+54, r25	; 0x36
    1ef0:	af ab       	std	Y+55, r26	; 0x37
    1ef2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef8:	8f a9       	ldd	r24, Y+55	; 0x37
    1efa:	98 ad       	ldd	r25, Y+56	; 0x38
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	4a e7       	ldi	r20, 0x7A	; 122
    1f02:	53 e4       	ldi	r21, 0x43	; 67
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	89 ab       	std	Y+49, r24	; 0x31
    1f0e:	9a ab       	std	Y+50, r25	; 0x32
    1f10:	ab ab       	std	Y+51, r26	; 0x33
    1f12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f14:	69 a9       	ldd	r22, Y+49	; 0x31
    1f16:	7a a9       	ldd	r23, Y+50	; 0x32
    1f18:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e8       	ldi	r20, 0x80	; 128
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	98 ab       	std	Y+48, r25	; 0x30
    1f32:	8f a7       	std	Y+47, r24	; 0x2f
    1f34:	3f c0       	rjmp	.+126    	; 0x1fb4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1f36:	69 a9       	ldd	r22, Y+49	; 0x31
    1f38:	7a a9       	ldd	r23, Y+50	; 0x32
    1f3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	3f ef       	ldi	r19, 0xFF	; 255
    1f42:	4f e7       	ldi	r20, 0x7F	; 127
    1f44:	57 e4       	ldi	r21, 0x47	; 71
    1f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4a:	18 16       	cp	r1, r24
    1f4c:	4c f5       	brge	.+82     	; 0x1fa0 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f50:	7e a9       	ldd	r23, Y+54	; 0x36
    1f52:	8f a9       	ldd	r24, Y+55	; 0x37
    1f54:	98 ad       	ldd	r25, Y+56	; 0x38
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e2       	ldi	r20, 0x20	; 32
    1f5c:	51 e4       	ldi	r21, 0x41	; 65
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	98 ab       	std	Y+48, r25	; 0x30
    1f74:	8f a7       	std	Y+47, r24	; 0x2f
    1f76:	0f c0       	rjmp	.+30     	; 0x1f96 <LCD_displayCharacter+0xd2>
    1f78:	89 e1       	ldi	r24, 0x19	; 25
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9e a7       	std	Y+46, r25	; 0x2e
    1f7e:	8d a7       	std	Y+45, r24	; 0x2d
    1f80:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f82:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <LCD_displayCharacter+0xc0>
    1f88:	9e a7       	std	Y+46, r25	; 0x2e
    1f8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	98 ab       	std	Y+48, r25	; 0x30
    1f94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f98:	98 a9       	ldd	r25, Y+48	; 0x30
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	69 f7       	brne	.-38     	; 0x1f78 <LCD_displayCharacter+0xb4>
    1f9e:	14 c0       	rjmp	.+40     	; 0x1fc8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	98 ab       	std	Y+48, r25	; 0x30
    1fb2:	8f a7       	std	Y+47, r24	; 0x2f
    1fb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb8:	9c a7       	std	Y+44, r25	; 0x2c
    1fba:	8b a7       	std	Y+43, r24	; 0x2b
    1fbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <LCD_displayCharacter+0xfc>
    1fc4:	9c a7       	std	Y+44, r25	; 0x2c
    1fc6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN,LOGIC_HIGH);
    1fc8:	83 e0       	ldi	r24, 0x03	; 3
    1fca:	62 e0       	ldi	r22, 0x02	; 2
    1fcc:	41 e0       	ldi	r20, 0x01	; 1
    1fce:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a0 e8       	ldi	r26, 0x80	; 128
    1fd8:	bf e3       	ldi	r27, 0x3F	; 63
    1fda:	8f a3       	std	Y+39, r24	; 0x27
    1fdc:	98 a7       	std	Y+40, r25	; 0x28
    1fde:	a9 a7       	std	Y+41, r26	; 0x29
    1fe0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fe4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	4a e7       	ldi	r20, 0x7A	; 122
    1ff0:	53 e4       	ldi	r21, 0x43	; 67
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	8b a3       	std	Y+35, r24	; 0x23
    1ffc:	9c a3       	std	Y+36, r25	; 0x24
    1ffe:	ad a3       	std	Y+37, r26	; 0x25
    2000:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2002:	6b a1       	ldd	r22, Y+35	; 0x23
    2004:	7c a1       	ldd	r23, Y+36	; 0x24
    2006:	8d a1       	ldd	r24, Y+37	; 0x25
    2008:	9e a1       	ldd	r25, Y+38	; 0x26
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e8       	ldi	r20, 0x80	; 128
    2010:	5f e3       	ldi	r21, 0x3F	; 63
    2012:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2016:	88 23       	and	r24, r24
    2018:	2c f4       	brge	.+10     	; 0x2024 <LCD_displayCharacter+0x160>
		__ticks = 1;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	9a a3       	std	Y+34, r25	; 0x22
    2020:	89 a3       	std	Y+33, r24	; 0x21
    2022:	3f c0       	rjmp	.+126    	; 0x20a2 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2024:	6b a1       	ldd	r22, Y+35	; 0x23
    2026:	7c a1       	ldd	r23, Y+36	; 0x24
    2028:	8d a1       	ldd	r24, Y+37	; 0x25
    202a:	9e a1       	ldd	r25, Y+38	; 0x26
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	3f ef       	ldi	r19, 0xFF	; 255
    2030:	4f e7       	ldi	r20, 0x7F	; 127
    2032:	57 e4       	ldi	r21, 0x47	; 71
    2034:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2038:	18 16       	cp	r1, r24
    203a:	4c f5       	brge	.+82     	; 0x208e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203c:	6f a1       	ldd	r22, Y+39	; 0x27
    203e:	78 a5       	ldd	r23, Y+40	; 0x28
    2040:	89 a5       	ldd	r24, Y+41	; 0x29
    2042:	9a a5       	ldd	r25, Y+42	; 0x2a
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e2       	ldi	r20, 0x20	; 32
    204a:	51 e4       	ldi	r21, 0x41	; 65
    204c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	bc 01       	movw	r22, r24
    2056:	cd 01       	movw	r24, r26
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	9a a3       	std	Y+34, r25	; 0x22
    2062:	89 a3       	std	Y+33, r24	; 0x21
    2064:	0f c0       	rjmp	.+30     	; 0x2084 <LCD_displayCharacter+0x1c0>
    2066:	89 e1       	ldi	r24, 0x19	; 25
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	98 a3       	std	Y+32, r25	; 0x20
    206c:	8f 8f       	std	Y+31, r24	; 0x1f
    206e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2070:	98 a1       	ldd	r25, Y+32	; 0x20
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <LCD_displayCharacter+0x1ae>
    2076:	98 a3       	std	Y+32, r25	; 0x20
    2078:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207a:	89 a1       	ldd	r24, Y+33	; 0x21
    207c:	9a a1       	ldd	r25, Y+34	; 0x22
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	9a a3       	std	Y+34, r25	; 0x22
    2082:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2084:	89 a1       	ldd	r24, Y+33	; 0x21
    2086:	9a a1       	ldd	r25, Y+34	; 0x22
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	69 f7       	brne	.-38     	; 0x2066 <LCD_displayCharacter+0x1a2>
    208c:	14 c0       	rjmp	.+40     	; 0x20b6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208e:	6b a1       	ldd	r22, Y+35	; 0x23
    2090:	7c a1       	ldd	r23, Y+36	; 0x24
    2092:	8d a1       	ldd	r24, Y+37	; 0x25
    2094:	9e a1       	ldd	r25, Y+38	; 0x26
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9a a3       	std	Y+34, r25	; 0x22
    20a0:	89 a3       	std	Y+33, r24	; 0x21
    20a2:	89 a1       	ldd	r24, Y+33	; 0x21
    20a4:	9a a1       	ldd	r25, Y+34	; 0x22
    20a6:	9e 8f       	std	Y+30, r25	; 0x1e
    20a8:	8d 8f       	std	Y+29, r24	; 0x1d
    20aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_displayCharacter+0x1ea>
    20b2:	9e 8f       	std	Y+30, r25	; 0x1e
    20b4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if LCD_DATA_MODE == 8
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	69 ad       	ldd	r22, Y+57	; 0x39
    20ba:	0e 94 b9 0a 	call	0x1572	; 0x1572 <GPIO_writePort>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e8       	ldi	r26, 0x80	; 128
    20c4:	bf e3       	ldi	r27, 0x3F	; 63
    20c6:	89 8f       	std	Y+25, r24	; 0x19
    20c8:	9a 8f       	std	Y+26, r25	; 0x1a
    20ca:	ab 8f       	std	Y+27, r26	; 0x1b
    20cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	69 8d       	ldd	r22, Y+25	; 0x19
    20d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a e7       	ldi	r20, 0x7A	; 122
    20dc:	53 e4       	ldi	r21, 0x43	; 67
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8d 8b       	std	Y+21, r24	; 0x15
    20e8:	9e 8b       	std	Y+22, r25	; 0x16
    20ea:	af 8b       	std	Y+23, r26	; 0x17
    20ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ee:	6d 89       	ldd	r22, Y+21	; 0x15
    20f0:	7e 89       	ldd	r23, Y+22	; 0x16
    20f2:	8f 89       	ldd	r24, Y+23	; 0x17
    20f4:	98 8d       	ldd	r25, Y+24	; 0x18
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9c 8b       	std	Y+20, r25	; 0x14
    210c:	8b 8b       	std	Y+19, r24	; 0x13
    210e:	3f c0       	rjmp	.+126    	; 0x218e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2110:	6d 89       	ldd	r22, Y+21	; 0x15
    2112:	7e 89       	ldd	r23, Y+22	; 0x16
    2114:	8f 89       	ldd	r24, Y+23	; 0x17
    2116:	98 8d       	ldd	r25, Y+24	; 0x18
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	69 8d       	ldd	r22, Y+25	; 0x19
    212a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9c 8b       	std	Y+20, r25	; 0x14
    214e:	8b 8b       	std	Y+19, r24	; 0x13
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <LCD_displayCharacter+0x2ac>
    2152:	89 e1       	ldi	r24, 0x19	; 25
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9a 8b       	std	Y+18, r25	; 0x12
    2158:	89 8b       	std	Y+17, r24	; 0x11
    215a:	89 89       	ldd	r24, Y+17	; 0x11
    215c:	9a 89       	ldd	r25, Y+18	; 0x12
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_displayCharacter+0x29a>
    2162:	9a 8b       	std	Y+18, r25	; 0x12
    2164:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9c 8b       	std	Y+20, r25	; 0x14
    216e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8b 89       	ldd	r24, Y+19	; 0x13
    2172:	9c 89       	ldd	r25, Y+20	; 0x14
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <LCD_displayCharacter+0x28e>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6d 89       	ldd	r22, Y+21	; 0x15
    217c:	7e 89       	ldd	r23, Y+22	; 0x16
    217e:	8f 89       	ldd	r24, Y+23	; 0x17
    2180:	98 8d       	ldd	r25, Y+24	; 0x18
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9c 8b       	std	Y+20, r25	; 0x14
    218c:	8b 8b       	std	Y+19, r24	; 0x13
    218e:	8b 89       	ldd	r24, Y+19	; 0x13
    2190:	9c 89       	ldd	r25, Y+20	; 0x14
    2192:	98 8b       	std	Y+16, r25	; 0x10
    2194:	8f 87       	std	Y+15, r24	; 0x0f
    2196:	8f 85       	ldd	r24, Y+15	; 0x0f
    2198:	98 89       	ldd	r25, Y+16	; 0x10
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_displayCharacter+0x2d6>
    219e:	98 8b       	std	Y+16, r25	; 0x10
    21a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN,LOGIC_LOW);
    21a2:	83 e0       	ldi	r24, 0x03	; 3
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	a0 e8       	ldi	r26, 0x80	; 128
    21b2:	bf e3       	ldi	r27, 0x3F	; 63
    21b4:	8b 87       	std	Y+11, r24	; 0x0b
    21b6:	9c 87       	std	Y+12, r25	; 0x0c
    21b8:	ad 87       	std	Y+13, r26	; 0x0d
    21ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21be:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a e7       	ldi	r20, 0x7A	; 122
    21ca:	53 e4       	ldi	r21, 0x43	; 67
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	8f 83       	std	Y+7, r24	; 0x07
    21d6:	98 87       	std	Y+8, r25	; 0x08
    21d8:	a9 87       	std	Y+9, r26	; 0x09
    21da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21dc:	6f 81       	ldd	r22, Y+7	; 0x07
    21de:	78 85       	ldd	r23, Y+8	; 0x08
    21e0:	89 85       	ldd	r24, Y+9	; 0x09
    21e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	2c f4       	brge	.+10     	; 0x21fe <LCD_displayCharacter+0x33a>
		__ticks = 1;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	3f c0       	rjmp	.+126    	; 0x227c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    21fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2200:	78 85       	ldd	r23, Y+8	; 0x08
    2202:	89 85       	ldd	r24, Y+9	; 0x09
    2204:	9a 85       	ldd	r25, Y+10	; 0x0a
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	3f ef       	ldi	r19, 0xFF	; 255
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	57 e4       	ldi	r21, 0x47	; 71
    220e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	4c f5       	brge	.+82     	; 0x2268 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2216:	6b 85       	ldd	r22, Y+11	; 0x0b
    2218:	7c 85       	ldd	r23, Y+12	; 0x0c
    221a:	8d 85       	ldd	r24, Y+13	; 0x0d
    221c:	9e 85       	ldd	r25, Y+14	; 0x0e
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e2       	ldi	r20, 0x20	; 32
    2224:	51 e4       	ldi	r21, 0x41	; 65
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
    223e:	0f c0       	rjmp	.+30     	; 0x225e <LCD_displayCharacter+0x39a>
    2240:	89 e1       	ldi	r24, 0x19	; 25
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9c 83       	std	Y+4, r25	; 0x04
    2246:	8b 83       	std	Y+3, r24	; 0x03
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_displayCharacter+0x388>
    2250:	9c 83       	std	Y+4, r25	; 0x04
    2252:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	69 f7       	brne	.-38     	; 0x2240 <LCD_displayCharacter+0x37c>
    2266:	14 c0       	rjmp	.+40     	; 0x2290 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2268:	6f 81       	ldd	r22, Y+7	; 0x07
    226a:	78 85       	ldd	r23, Y+8	; 0x08
    226c:	89 85       	ldd	r24, Y+9	; 0x09
    226e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	8d 83       	std	Y+5, r24	; 0x05
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	9a 83       	std	Y+2, r25	; 0x02
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_displayCharacter+0x3c4>
    228c:	9a 83       	std	Y+2, r25	; 0x02
    228e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN7_ID,READ_BIT(data,3));
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN,LOGIC_LOW);
	_delay_ms(1);
#endif
}
    2290:	e9 96       	adiw	r28, 0x39	; 57
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <LCD_displayString>:
void LCD_displayString(const uint8 *str)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <LCD_displayString+0x6>
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	9a 83       	std	Y+2, r25	; 0x02
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	0a c0       	rjmp	.+20     	; 0x22c6 <LCD_displayString+0x24>
	while(*str != '\0')
	{
		LCD_displayCharacter((*str));
    22b2:	e9 81       	ldd	r30, Y+1	; 0x01
    22b4:	fa 81       	ldd	r31, Y+2	; 0x02
    22b6:	80 81       	ld	r24, Z
    22b8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_displayCharacter>
		str++;
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
    22c0:	01 96       	adiw	r24, 0x01	; 1
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
void LCD_displayString(const uint8 *str)
{
	while(*str != '\0')
    22c6:	e9 81       	ldd	r30, Y+1	; 0x01
    22c8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ca:	80 81       	ld	r24, Z
    22cc:	88 23       	and	r24, r24
    22ce:	89 f7       	brne	.-30     	; 0x22b2 <LCD_displayString+0x10>
	{
		LCD_displayCharacter((*str));
		str++;
	}
}
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <LCD_moveCursor+0x6>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <LCD_moveCursor+0x8>
    22e2:	0f 92       	push	r0
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	8a 83       	std	Y+2, r24	; 0x02
    22ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 shift = 0;
    22ec:	19 82       	std	Y+1, r1	; 0x01
	switch(row)
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	3d 83       	std	Y+5, r19	; 0x05
    22f6:	2c 83       	std	Y+4, r18	; 0x04
    22f8:	8c 81       	ldd	r24, Y+4	; 0x04
    22fa:	9d 81       	ldd	r25, Y+5	; 0x05
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	31 f0       	breq	.+12     	; 0x230c <LCD_moveCursor+0x32>
    2300:	2c 81       	ldd	r18, Y+4	; 0x04
    2302:	3d 81       	ldd	r19, Y+5	; 0x05
    2304:	21 30       	cpi	r18, 0x01	; 1
    2306:	31 05       	cpc	r19, r1
    2308:	21 f0       	breq	.+8      	; 0x2312 <LCD_moveCursor+0x38>
    230a:	06 c0       	rjmp	.+12     	; 0x2318 <LCD_moveCursor+0x3e>
	{
#if NUMBER_OF_ROW_OF_LCD == 1
		case 0:shift = 0x00 + col;break;
#elif NUMBER_OF_ROW_OF_LCD == 2
		case 0:shift = 0x00 + col;break;
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <LCD_moveCursor+0x3e>
		case 1:shift = 0x40 + col;break;
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	80 5c       	subi	r24, 0xC0	; 192
    2316:	89 83       	std	Y+1, r24	; 0x01
		case 1:shift = 0x40 + col;break;
		case 2:shift = 0x10 + col;break;
		case 3:shift = 0x50 + col;break;
#endif
	}
	LCD_sendCommand(LCD_SET_CURSOR_LOCATION | shift);
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	80 68       	ori	r24, 0x80	; 128
    231c:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_sendCommand>
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *str)
{
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	00 d0       	rcall	.+0      	; 0x2336 <LCD_displayStringRowColumn+0x6>
    2336:	00 d0       	rcall	.+0      	; 0x2338 <LCD_displayStringRowColumn+0x8>
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	6a 83       	std	Y+2, r22	; 0x02
    2340:	5c 83       	std	Y+4, r21	; 0x04
    2342:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	6a 81       	ldd	r22, Y+2	; 0x02
    2348:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_moveCursor>
	LCD_displayString(str);
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_displayString>
}
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <LCD_displayIntgerNumber>:
void LCD_displayIntgerNumber(uint32 num)
{
    2362:	0f 93       	push	r16
    2364:	1f 93       	push	r17
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	65 97       	sbiw	r28, 0x15	; 21
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	6a 8b       	std	Y+18, r22	; 0x12
    237c:	7b 8b       	std	Y+19, r23	; 0x13
    237e:	8c 8b       	std	Y+20, r24	; 0x14
    2380:	9d 8b       	std	Y+21, r25	; 0x15
	/************* Array to store the digit ************/
	uint8 digit[16] = {0};
    2382:	80 e1       	ldi	r24, 0x10	; 16
    2384:	fe 01       	movw	r30, r28
    2386:	32 96       	adiw	r30, 0x02	; 2
    2388:	df 01       	movw	r26, r30
    238a:	98 2f       	mov	r25, r24
    238c:	1d 92       	st	X+, r1
    238e:	9a 95       	dec	r25
    2390:	e9 f7       	brne	.-6      	; 0x238c <LCD_displayIntgerNumber+0x2a>
	/******* counter use for count the number of digits ***/
	sint8 count = 0;
    2392:	19 82       	std	Y+1, r1	; 0x01
	/**** Special case for zero ******/

	if(num == 0)
    2394:	8a 89       	ldd	r24, Y+18	; 0x12
    2396:	9b 89       	ldd	r25, Y+19	; 0x13
    2398:	ac 89       	ldd	r26, Y+20	; 0x14
    239a:	bd 89       	ldd	r27, Y+21	; 0x15
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	a1 05       	cpc	r26, r1
    23a0:	b1 05       	cpc	r27, r1
    23a2:	e9 f5       	brne	.+122    	; 0x241e <LCD_displayIntgerNumber+0xbc>
	{
		digit[count] = '0';
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	28 2f       	mov	r18, r24
    23a8:	33 27       	eor	r19, r19
    23aa:	27 fd       	sbrc	r18, 7
    23ac:	30 95       	com	r19
    23ae:	ce 01       	movw	r24, r28
    23b0:	02 96       	adiw	r24, 0x02	; 2
    23b2:	fc 01       	movw	r30, r24
    23b4:	e2 0f       	add	r30, r18
    23b6:	f3 1f       	adc	r31, r19
    23b8:	80 e3       	ldi	r24, 0x30	; 48
    23ba:	80 83       	st	Z, r24
    23bc:	49 c0       	rjmp	.+146    	; 0x2450 <LCD_displayIntgerNumber+0xee>
	else
	{
		/**** This looping use for slicing the input number to digits***/
		while(num != 0)
		{
			digit[count] = (num % 10) + '0';
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	08 2f       	mov	r16, r24
    23c2:	11 27       	eor	r17, r17
    23c4:	07 fd       	sbrc	r16, 7
    23c6:	10 95       	com	r17
    23c8:	8a 89       	ldd	r24, Y+18	; 0x12
    23ca:	9b 89       	ldd	r25, Y+19	; 0x13
    23cc:	ac 89       	ldd	r26, Y+20	; 0x14
    23ce:	bd 89       	ldd	r27, Y+21	; 0x15
    23d0:	2a e0       	ldi	r18, 0x0A	; 10
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	50 e0       	ldi	r21, 0x00	; 0
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	0e 94 42 14 	call	0x2884	; 0x2884 <__udivmodsi4>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	28 2f       	mov	r18, r24
    23e6:	20 5d       	subi	r18, 0xD0	; 208
    23e8:	ce 01       	movw	r24, r28
    23ea:	02 96       	adiw	r24, 0x02	; 2
    23ec:	fc 01       	movw	r30, r24
    23ee:	e0 0f       	add	r30, r16
    23f0:	f1 1f       	adc	r31, r17
    23f2:	20 83       	st	Z, r18
			num /= 10;
    23f4:	8a 89       	ldd	r24, Y+18	; 0x12
    23f6:	9b 89       	ldd	r25, Y+19	; 0x13
    23f8:	ac 89       	ldd	r26, Y+20	; 0x14
    23fa:	bd 89       	ldd	r27, Y+21	; 0x15
    23fc:	2a e0       	ldi	r18, 0x0A	; 10
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 42 14 	call	0x2884	; 0x2884 <__udivmodsi4>
    240c:	da 01       	movw	r26, r20
    240e:	c9 01       	movw	r24, r18
    2410:	8a 8b       	std	Y+18, r24	; 0x12
    2412:	9b 8b       	std	Y+19, r25	; 0x13
    2414:	ac 8b       	std	Y+20, r26	; 0x14
    2416:	bd 8b       	std	Y+21, r27	; 0x15
			count++;
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	8f 5f       	subi	r24, 0xFF	; 255
    241c:	89 83       	std	Y+1, r24	; 0x01
		digit[count] = '0';
	}
	else
	{
		/**** This looping use for slicing the input number to digits***/
		while(num != 0)
    241e:	8a 89       	ldd	r24, Y+18	; 0x12
    2420:	9b 89       	ldd	r25, Y+19	; 0x13
    2422:	ac 89       	ldd	r26, Y+20	; 0x14
    2424:	bd 89       	ldd	r27, Y+21	; 0x15
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	a1 05       	cpc	r26, r1
    242a:	b1 05       	cpc	r27, r1
    242c:	41 f6       	brne	.-112    	; 0x23be <LCD_displayIntgerNumber+0x5c>
    242e:	10 c0       	rjmp	.+32     	; 0x2450 <LCD_displayIntgerNumber+0xee>
		}
	}
	/************** This loop using for display on LCD ****/
	while(count >= 0)
	{
		LCD_displayCharacter(digit[count]);
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	28 2f       	mov	r18, r24
    2434:	33 27       	eor	r19, r19
    2436:	27 fd       	sbrc	r18, 7
    2438:	30 95       	com	r19
    243a:	ce 01       	movw	r24, r28
    243c:	02 96       	adiw	r24, 0x02	; 2
    243e:	fc 01       	movw	r30, r24
    2440:	e2 0f       	add	r30, r18
    2442:	f3 1f       	adc	r31, r19
    2444:	80 81       	ld	r24, Z
    2446:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_displayCharacter>
		count--;
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	81 50       	subi	r24, 0x01	; 1
    244e:	89 83       	std	Y+1, r24	; 0x01
			num /= 10;
			count++;
		}
	}
	/************** This loop using for display on LCD ****/
	while(count >= 0)
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	88 23       	and	r24, r24
    2454:	6c f7       	brge	.-38     	; 0x2430 <LCD_displayIntgerNumber+0xce>
	{
		LCD_displayCharacter(digit[count]);
		count--;
	}
}
    2456:	65 96       	adiw	r28, 0x15	; 21
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	1f 91       	pop	r17
    2468:	0f 91       	pop	r16
    246a:	08 95       	ret

0000246c <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_sendCommand>
}
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <LCD_secpecialCharacter>:
	itoa(data,buff,10);
	LCD_displayString(buff);
}*/

void LCD_secpecialCharacter(uint8 *pattern,uint8 Location_number,uint8 row,uint8 column)
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	64 97       	sbiw	r28, 0x14	; 20
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	99 8b       	std	Y+17, r25	; 0x11
    2496:	88 8b       	std	Y+16, r24	; 0x10
    2498:	6a 8b       	std	Y+18, r22	; 0x12
    249a:	4b 8b       	std	Y+19, r20	; 0x13
    249c:	2c 8b       	std	Y+20, r18	; 0x14

	uint8 counter = 0;
    249e:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_sendCommand(SET_CURSOR_TO_CGRAM + (Location_number * 8));
    24a0:	8a 89       	ldd	r24, Y+18	; 0x12
    24a2:	88 2f       	mov	r24, r24
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	08 96       	adiw	r24, 0x08	; 8
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_sendCommand>
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a0 ea       	ldi	r26, 0xA0	; 160
    24be:	b0 e4       	ldi	r27, 0x40	; 64
    24c0:	8b 87       	std	Y+11, r24	; 0x0b
    24c2:	9c 87       	std	Y+12, r25	; 0x0c
    24c4:	ad 87       	std	Y+13, r26	; 0x0d
    24c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    24cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	4a e7       	ldi	r20, 0x7A	; 122
    24d6:	53 e4       	ldi	r21, 0x43	; 67
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	8f 83       	std	Y+7, r24	; 0x07
    24e2:	98 87       	std	Y+8, r25	; 0x08
    24e4:	a9 87       	std	Y+9, r26	; 0x09
    24e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ea:	78 85       	ldd	r23, Y+8	; 0x08
    24ec:	89 85       	ldd	r24, Y+9	; 0x09
    24ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e8       	ldi	r20, 0x80	; 128
    24f6:	5f e3       	ldi	r21, 0x3F	; 63
    24f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24fc:	88 23       	and	r24, r24
    24fe:	2c f4       	brge	.+10     	; 0x250a <LCD_secpecialCharacter+0x8a>
		__ticks = 1;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
    2508:	3f c0       	rjmp	.+126    	; 0x2588 <LCD_secpecialCharacter+0x108>
	else if (__tmp > 65535)
    250a:	6f 81       	ldd	r22, Y+7	; 0x07
    250c:	78 85       	ldd	r23, Y+8	; 0x08
    250e:	89 85       	ldd	r24, Y+9	; 0x09
    2510:	9a 85       	ldd	r25, Y+10	; 0x0a
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	3f ef       	ldi	r19, 0xFF	; 255
    2516:	4f e7       	ldi	r20, 0x7F	; 127
    2518:	57 e4       	ldi	r21, 0x47	; 71
    251a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    251e:	18 16       	cp	r1, r24
    2520:	4c f5       	brge	.+82     	; 0x2574 <LCD_secpecialCharacter+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2522:	6b 85       	ldd	r22, Y+11	; 0x0b
    2524:	7c 85       	ldd	r23, Y+12	; 0x0c
    2526:	8d 85       	ldd	r24, Y+13	; 0x0d
    2528:	9e 85       	ldd	r25, Y+14	; 0x0e
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e2       	ldi	r20, 0x20	; 32
    2530:	51 e4       	ldi	r21, 0x41	; 65
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	bc 01       	movw	r22, r24
    253c:	cd 01       	movw	r24, r26
    253e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
    254a:	0f c0       	rjmp	.+30     	; 0x256a <LCD_secpecialCharacter+0xea>
    254c:	89 e1       	ldi	r24, 0x19	; 25
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	9c 83       	std	Y+4, r25	; 0x04
    2552:	8b 83       	std	Y+3, r24	; 0x03
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <LCD_secpecialCharacter+0xd8>
    255c:	9c 83       	std	Y+4, r25	; 0x04
    255e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2560:	8d 81       	ldd	r24, Y+5	; 0x05
    2562:	9e 81       	ldd	r25, Y+6	; 0x06
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	9e 83       	std	Y+6, r25	; 0x06
    2568:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256a:	8d 81       	ldd	r24, Y+5	; 0x05
    256c:	9e 81       	ldd	r25, Y+6	; 0x06
    256e:	00 97       	sbiw	r24, 0x00	; 0
    2570:	69 f7       	brne	.-38     	; 0x254c <LCD_secpecialCharacter+0xcc>
    2572:	14 c0       	rjmp	.+40     	; 0x259c <LCD_secpecialCharacter+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2574:	6f 81       	ldd	r22, Y+7	; 0x07
    2576:	78 85       	ldd	r23, Y+8	; 0x08
    2578:	89 85       	ldd	r24, Y+9	; 0x09
    257a:	9a 85       	ldd	r25, Y+10	; 0x0a
    257c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9e 83       	std	Y+6, r25	; 0x06
    2586:	8d 83       	std	Y+5, r24	; 0x05
    2588:	8d 81       	ldd	r24, Y+5	; 0x05
    258a:	9e 81       	ldd	r25, Y+6	; 0x06
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	9a 81       	ldd	r25, Y+2	; 0x02
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <LCD_secpecialCharacter+0x114>
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

	 for(counter = 0; counter < 8; counter ++)
    259c:	1f 86       	std	Y+15, r1	; 0x0f
    259e:	0e c0       	rjmp	.+28     	; 0x25bc <LCD_secpecialCharacter+0x13c>
	 {
		 LCD_displayCharacter(pattern[counter]);
    25a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	88 89       	ldd	r24, Y+16	; 0x10
    25a8:	99 89       	ldd	r25, Y+17	; 0x11
    25aa:	fc 01       	movw	r30, r24
    25ac:	e2 0f       	add	r30, r18
    25ae:	f3 1f       	adc	r31, r19
    25b0:	80 81       	ld	r24, Z
    25b2:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_displayCharacter>

	uint8 counter = 0;
	LCD_sendCommand(SET_CURSOR_TO_CGRAM + (Location_number * 8));
	_delay_ms(5);

	 for(counter = 0; counter < 8; counter ++)
    25b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b8:	8f 5f       	subi	r24, 0xFF	; 255
    25ba:	8f 87       	std	Y+15, r24	; 0x0f
    25bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25be:	88 30       	cpi	r24, 0x08	; 8
    25c0:	78 f3       	brcs	.-34     	; 0x25a0 <LCD_secpecialCharacter+0x120>
	 {
		 LCD_displayCharacter(pattern[counter]);
	 }
	 LCD_moveCursor(row,column);
    25c2:	8b 89       	ldd	r24, Y+19	; 0x13
    25c4:	6c 89       	ldd	r22, Y+20	; 0x14
    25c6:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_moveCursor>
	 LCD_displayCharacter(Location_number);
    25ca:	8a 89       	ldd	r24, Y+18	; 0x12
    25cc:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_displayCharacter>
}
    25d0:	64 96       	adiw	r28, 0x14	; 20
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <MOTOR_init>:
#define SIZE_OF_TIMER     8
#endif
/********************* The implementations for usage functions *********************************/
/*** The implementation of initial function for motor , to set some of command ***/
void MOTOR_init(void)
{
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
	/*** Set the pins direction ***/
	GPIO_setupPinDirection(FIRST_PORT_FOR_FIRST_PIN,FIRST_PIN,PIN_OUTPUT);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SECOND_PORT_FOR_SECOND_PIN,SECOND_PIN,PIN_OUTPUT);
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	61 e0       	ldi	r22, 0x01	; 1
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
#if ENABLE_PIN            ==              CONNECTING_PWM_PIN
	/*** Call the initial  function of timer,and set timer in pwm_mode, any selection timer ***/
	iniat_Timer();
    25fe:	0e 94 17 07 	call	0xe2e	; 0xe2e <iniat_Timer>
#endif
}
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <MOTOR_speed>:
#if ENABLE_PIN            ==              CONNECTING_PWM_PIN
/*** This prototype of function use to determine the speed from 0% to 100% ***/
void MOTOR_speed(uint8 speed)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	00 d0       	rcall	.+0      	; 0x260e <MOTOR_speed+0x6>
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	8a 83       	std	Y+2, r24	; 0x02
	/*** The speed input from 0% to 100%   ***/
#if SIZE_OF_TIMER         ==             8
	uint8 duty = (uint16)(speed * 255)/(100);
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	48 2f       	mov	r20, r24
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	ca 01       	movw	r24, r20
    261c:	9c 01       	movw	r18, r24
    261e:	22 0f       	add	r18, r18
    2620:	33 1f       	adc	r19, r19
    2622:	c9 01       	movw	r24, r18
    2624:	96 95       	lsr	r25
    2626:	98 2f       	mov	r25, r24
    2628:	88 27       	eor	r24, r24
    262a:	97 95       	ror	r25
    262c:	87 95       	ror	r24
    262e:	82 1b       	sub	r24, r18
    2630:	93 0b       	sbc	r25, r19
    2632:	84 0f       	add	r24, r20
    2634:	95 1f       	adc	r25, r21
    2636:	24 e6       	ldi	r18, 0x64	; 100
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	b9 01       	movw	r22, r18
    263c:	0e 94 2e 14 	call	0x285c	; 0x285c <__udivmodhi4>
    2640:	cb 01       	movw	r24, r22
    2642:	89 83       	std	Y+1, r24	; 0x01
/*
 * duty = (((uint16)(speed * 2^(SIZE_OF_TIMER) )/(100)) - 1);
 * duty = (casting)((0 to 100) * (capacity of timer register)/100)-1
 */
	/*** Set the speed of motor by using the duty cycle ***/
	DUTY_cycleForTimers(SELECTION_TIMER,duty,0);
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	28 2f       	mov	r18, r24
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	b9 01       	movw	r22, r18
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	50 e0       	ldi	r21, 0x00	; 0
    2652:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DUTY_cycleForTimers>
}
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <MOTOR_directon>:
#endif
/*** The implementation of function use to determine the motor rotation direction and speed ***/
void MOTOR_directon(uint8 direction)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	00 d0       	rcall	.+0      	; 0x2666 <MOTOR_directon+0x6>
    2666:	0f 92       	push	r0
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	89 83       	std	Y+1, r24	; 0x01

	/*** Set the direction for motor ***/
	switch(direction)
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	28 2f       	mov	r18, r24
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	3b 83       	std	Y+3, r19	; 0x03
    2676:	2a 83       	std	Y+2, r18	; 0x02
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	9b 81       	ldd	r25, Y+3	; 0x03
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	31 f0       	breq	.+12     	; 0x268c <MOTOR_directon+0x2c>
    2680:	2a 81       	ldd	r18, Y+2	; 0x02
    2682:	3b 81       	ldd	r19, Y+3	; 0x03
    2684:	21 30       	cpi	r18, 0x01	; 1
    2686:	31 05       	cpc	r19, r1
    2688:	61 f0       	breq	.+24     	; 0x26a2 <MOTOR_directon+0x42>
    268a:	15 c0       	rjmp	.+42     	; 0x26b6 <MOTOR_directon+0x56>
	{
	case ANTI_CW:
				GPIO_writePin(FIRST_PORT_FOR_FIRST_PIN,FIRST_PIN,LOGIC_LOW);
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
				GPIO_writePin(SECOND_PORT_FOR_SECOND_PIN,SECOND_PIN,LOGIC_HIGH);
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	61 e0       	ldi	r22, 0x01	; 1
    269a:	41 e0       	ldi	r20, 0x01	; 1
    269c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    26a0:	0a c0       	rjmp	.+20     	; 0x26b6 <MOTOR_directon+0x56>
	break;
	case CW:
				GPIO_writePin(FIRST_PORT_FOR_FIRST_PIN,FIRST_PIN,LOGIC_HIGH);
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	41 e0       	ldi	r20, 0x01	; 1
    26a8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
				GPIO_writePin(SECOND_PORT_FOR_SECOND_PIN,SECOND_PIN,LOGIC_LOW);
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
	break;
	}

}
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <STOP_rotatonOfMotor>:
/*** The implementation of function use to stop the rotation of motor ***/
void STOP_rotatonOfMotor(void)
{
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(FIRST_PORT_FOR_FIRST_PIN,FIRST_PIN,LOGIC_LOW);
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	60 e0       	ldi	r22, 0x00	; 0
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
	GPIO_writePin(SECOND_PORT_FOR_SECOND_PIN,SECOND_PIN,LOGIC_LOW);
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	61 e0       	ldi	r22, 0x01	; 1
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>

}
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <main>:
#include "../MCAL/ADC/adc_interface.h"
#include "../HAL/LCD/lcd.h"
#include "../HAL/LM35_TEMP_SENSOR/lm35_temperature_interface.h"
#include "../HAL/DC_MOTOR/motor_interface.h"
void main(void)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	0f 92       	push	r0
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	/*** This variable used to store the temperature ***/
	uint8 temp = 0;
    26ee:	19 82       	std	Y+1, r1	; 0x01
	ADC_init(SENSOR_CHANNEL_ID); /* initialize ADC driver */
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <ADC_init>
	LCD_init(); /* initialize LCD driver */
    26f6:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <LCD_init>
	MOTOR_init();/* initialize DC_Motor */
    26fa:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <MOTOR_init>
	/* Display this string "ADC Value = " only once on LCD at the first row */
	LCD_moveCursor(0,0);
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_moveCursor>
	LCD_displayString("FAN is O");
    2706:	80 e6       	ldi	r24, 0x60	; 96
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_displayString>
	LCD_displayString("  ,Speed:");
    270e:	89 e6       	ldi	r24, 0x69	; 105
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_displayString>
	LCD_moveCursor(1,0);
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_moveCursor>
	LCD_displayString("Temp =  C ,= ");
    271e:	83 e7       	ldi	r24, 0x73	; 115
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_displayString>

    while(1)
    {
    	/* Read ADC channel 2 where the LM35_Sensor is connected */
    	temp = LM35_getTemperature();
    2726:	0e 94 bd 0b 	call	0x177a	; 0x177a <LM35_getTemperature>
    272a:	89 83       	std	Y+1, r24	; 0x01
		/* Display the ADC digital value every time at same position */
		LCD_moveCursor(1,6);
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	66 e0       	ldi	r22, 0x06	; 6
    2730:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_moveCursor>
		if(temp >= 100)
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	84 36       	cpi	r24, 0x64	; 100
    2738:	50 f0       	brcs	.+20     	; 0x274e <main+0x6a>
		{
			LCD_displayIntgerNumber(temp);
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a0 e0       	ldi	r26, 0x00	; 0
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	bc 01       	movw	r22, r24
    2746:	cd 01       	movw	r24, r26
    2748:	0e 94 b1 11 	call	0x2362	; 0x2362 <LCD_displayIntgerNumber>
    274c:	0c c0       	rjmp	.+24     	; 0x2766 <main+0x82>
		}
		else
		{
			LCD_displayIntgerNumber(temp);
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	88 2f       	mov	r24, r24
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a0 e0       	ldi	r26, 0x00	; 0
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 b1 11 	call	0x2362	; 0x2362 <LCD_displayIntgerNumber>
			/* In case the digital value is three or two or one digits print space in the next digit place */
			LCD_displayCharacter(' ');
    2760:	80 e2       	ldi	r24, 0x20	; 32
    2762:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_displayCharacter>
		}
		/*** For the fan speed ***/
		if(temp < 30)
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	8e 31       	cpi	r24, 0x1E	; 30
    276a:	98 f4       	brcc	.+38     	; 0x2792 <main+0xae>
		{
			LCD_moveCursor(0,8);
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	68 e0       	ldi	r22, 0x08	; 8
    2770:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_moveCursor>
			LCD_displayString("FF");
    2774:	81 e8       	ldi	r24, 0x81	; 129
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_displayString>
			LCD_moveCursor(1,12);
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	6c e0       	ldi	r22, 0x0C	; 12
    2780:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_moveCursor>
			LCD_displayString("0");
    2784:	84 e8       	ldi	r24, 0x84	; 132
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_displayString>
			/*** The fan is off ***/
			STOP_rotatonOfMotor();
    278c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <STOP_rotatonOfMotor>
    2790:	ca cf       	rjmp	.-108    	; 0x2726 <main+0x42>
		}
		else
		{
			LCD_moveCursor(0,8);
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	68 e0       	ldi	r22, 0x08	; 8
    2796:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_moveCursor>
			LCD_displayCharacter('N');
    279a:	8e e4       	ldi	r24, 0x4E	; 78
    279c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_displayCharacter>
			LCD_displayCharacter(' ');
    27a0:	80 e2       	ldi	r24, 0x20	; 32
    27a2:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_displayCharacter>
			MOTOR_directon(CW);
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	0e 94 30 13 	call	0x2660	; 0x2660 <MOTOR_directon>
			if(temp  < 60)
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	8c 33       	cpi	r24, 0x3C	; 60
    27b0:	60 f4       	brcc	.+24     	; 0x27ca <main+0xe6>
			{
				MOTOR_speed(25);
    27b2:	89 e1       	ldi	r24, 0x19	; 25
    27b4:	0e 94 04 13 	call	0x2608	; 0x2608 <MOTOR_speed>
				LCD_moveCursor(1,12);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	6c e0       	ldi	r22, 0x0C	; 12
    27bc:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_moveCursor>
				LCD_displayString("25");
    27c0:	86 e8       	ldi	r24, 0x86	; 134
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_displayString>
    27c8:	ae cf       	rjmp	.-164    	; 0x2726 <main+0x42>
			}
			else if(temp  < 90)
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	8a 35       	cpi	r24, 0x5A	; 90
    27ce:	60 f4       	brcc	.+24     	; 0x27e8 <main+0x104>
			{
				MOTOR_speed(50);
    27d0:	82 e3       	ldi	r24, 0x32	; 50
    27d2:	0e 94 04 13 	call	0x2608	; 0x2608 <MOTOR_speed>
				LCD_moveCursor(1,12);
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	6c e0       	ldi	r22, 0x0C	; 12
    27da:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_moveCursor>
				LCD_displayString("50");
    27de:	89 e8       	ldi	r24, 0x89	; 137
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_displayString>
    27e6:	9f cf       	rjmp	.-194    	; 0x2726 <main+0x42>
			}
			else if(temp  < 120)
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	88 37       	cpi	r24, 0x78	; 120
    27ec:	60 f4       	brcc	.+24     	; 0x2806 <main+0x122>
			{
				MOTOR_speed(75);
    27ee:	8b e4       	ldi	r24, 0x4B	; 75
    27f0:	0e 94 04 13 	call	0x2608	; 0x2608 <MOTOR_speed>
				LCD_moveCursor(1,12);
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	6c e0       	ldi	r22, 0x0C	; 12
    27f8:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_moveCursor>
				LCD_displayString("75");
    27fc:	8c e8       	ldi	r24, 0x8C	; 140
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_displayString>
    2804:	90 cf       	rjmp	.-224    	; 0x2726 <main+0x42>
			}
			else
			{
				MOTOR_speed(100);
    2806:	84 e6       	ldi	r24, 0x64	; 100
    2808:	0e 94 04 13 	call	0x2608	; 0x2608 <MOTOR_speed>
				LCD_moveCursor(1,12);
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	6c e0       	ldi	r22, 0x0C	; 12
    2810:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_moveCursor>
				LCD_displayString("100");
    2814:	8f e8       	ldi	r24, 0x8F	; 143
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_displayString>
    281c:	84 cf       	rjmp	.-248    	; 0x2726 <main+0x42>

0000281e <__mulsi3>:
    281e:	62 9f       	mul	r22, r18
    2820:	d0 01       	movw	r26, r0
    2822:	73 9f       	mul	r23, r19
    2824:	f0 01       	movw	r30, r0
    2826:	82 9f       	mul	r24, r18
    2828:	e0 0d       	add	r30, r0
    282a:	f1 1d       	adc	r31, r1
    282c:	64 9f       	mul	r22, r20
    282e:	e0 0d       	add	r30, r0
    2830:	f1 1d       	adc	r31, r1
    2832:	92 9f       	mul	r25, r18
    2834:	f0 0d       	add	r31, r0
    2836:	83 9f       	mul	r24, r19
    2838:	f0 0d       	add	r31, r0
    283a:	74 9f       	mul	r23, r20
    283c:	f0 0d       	add	r31, r0
    283e:	65 9f       	mul	r22, r21
    2840:	f0 0d       	add	r31, r0
    2842:	99 27       	eor	r25, r25
    2844:	72 9f       	mul	r23, r18
    2846:	b0 0d       	add	r27, r0
    2848:	e1 1d       	adc	r30, r1
    284a:	f9 1f       	adc	r31, r25
    284c:	63 9f       	mul	r22, r19
    284e:	b0 0d       	add	r27, r0
    2850:	e1 1d       	adc	r30, r1
    2852:	f9 1f       	adc	r31, r25
    2854:	bd 01       	movw	r22, r26
    2856:	cf 01       	movw	r24, r30
    2858:	11 24       	eor	r1, r1
    285a:	08 95       	ret

0000285c <__udivmodhi4>:
    285c:	aa 1b       	sub	r26, r26
    285e:	bb 1b       	sub	r27, r27
    2860:	51 e1       	ldi	r21, 0x11	; 17
    2862:	07 c0       	rjmp	.+14     	; 0x2872 <__udivmodhi4_ep>

00002864 <__udivmodhi4_loop>:
    2864:	aa 1f       	adc	r26, r26
    2866:	bb 1f       	adc	r27, r27
    2868:	a6 17       	cp	r26, r22
    286a:	b7 07       	cpc	r27, r23
    286c:	10 f0       	brcs	.+4      	; 0x2872 <__udivmodhi4_ep>
    286e:	a6 1b       	sub	r26, r22
    2870:	b7 0b       	sbc	r27, r23

00002872 <__udivmodhi4_ep>:
    2872:	88 1f       	adc	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	5a 95       	dec	r21
    2878:	a9 f7       	brne	.-22     	; 0x2864 <__udivmodhi4_loop>
    287a:	80 95       	com	r24
    287c:	90 95       	com	r25
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	08 95       	ret

00002884 <__udivmodsi4>:
    2884:	a1 e2       	ldi	r26, 0x21	; 33
    2886:	1a 2e       	mov	r1, r26
    2888:	aa 1b       	sub	r26, r26
    288a:	bb 1b       	sub	r27, r27
    288c:	fd 01       	movw	r30, r26
    288e:	0d c0       	rjmp	.+26     	; 0x28aa <__udivmodsi4_ep>

00002890 <__udivmodsi4_loop>:
    2890:	aa 1f       	adc	r26, r26
    2892:	bb 1f       	adc	r27, r27
    2894:	ee 1f       	adc	r30, r30
    2896:	ff 1f       	adc	r31, r31
    2898:	a2 17       	cp	r26, r18
    289a:	b3 07       	cpc	r27, r19
    289c:	e4 07       	cpc	r30, r20
    289e:	f5 07       	cpc	r31, r21
    28a0:	20 f0       	brcs	.+8      	; 0x28aa <__udivmodsi4_ep>
    28a2:	a2 1b       	sub	r26, r18
    28a4:	b3 0b       	sbc	r27, r19
    28a6:	e4 0b       	sbc	r30, r20
    28a8:	f5 0b       	sbc	r31, r21

000028aa <__udivmodsi4_ep>:
    28aa:	66 1f       	adc	r22, r22
    28ac:	77 1f       	adc	r23, r23
    28ae:	88 1f       	adc	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	1a 94       	dec	r1
    28b4:	69 f7       	brne	.-38     	; 0x2890 <__udivmodsi4_loop>
    28b6:	60 95       	com	r22
    28b8:	70 95       	com	r23
    28ba:	80 95       	com	r24
    28bc:	90 95       	com	r25
    28be:	9b 01       	movw	r18, r22
    28c0:	ac 01       	movw	r20, r24
    28c2:	bd 01       	movw	r22, r26
    28c4:	cf 01       	movw	r24, r30
    28c6:	08 95       	ret

000028c8 <__prologue_saves__>:
    28c8:	2f 92       	push	r2
    28ca:	3f 92       	push	r3
    28cc:	4f 92       	push	r4
    28ce:	5f 92       	push	r5
    28d0:	6f 92       	push	r6
    28d2:	7f 92       	push	r7
    28d4:	8f 92       	push	r8
    28d6:	9f 92       	push	r9
    28d8:	af 92       	push	r10
    28da:	bf 92       	push	r11
    28dc:	cf 92       	push	r12
    28de:	df 92       	push	r13
    28e0:	ef 92       	push	r14
    28e2:	ff 92       	push	r15
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	cf 93       	push	r28
    28ea:	df 93       	push	r29
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	ca 1b       	sub	r28, r26
    28f2:	db 0b       	sbc	r29, r27
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	09 94       	ijmp

00002900 <__epilogue_restores__>:
    2900:	2a 88       	ldd	r2, Y+18	; 0x12
    2902:	39 88       	ldd	r3, Y+17	; 0x11
    2904:	48 88       	ldd	r4, Y+16	; 0x10
    2906:	5f 84       	ldd	r5, Y+15	; 0x0f
    2908:	6e 84       	ldd	r6, Y+14	; 0x0e
    290a:	7d 84       	ldd	r7, Y+13	; 0x0d
    290c:	8c 84       	ldd	r8, Y+12	; 0x0c
    290e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2910:	aa 84       	ldd	r10, Y+10	; 0x0a
    2912:	b9 84       	ldd	r11, Y+9	; 0x09
    2914:	c8 84       	ldd	r12, Y+8	; 0x08
    2916:	df 80       	ldd	r13, Y+7	; 0x07
    2918:	ee 80       	ldd	r14, Y+6	; 0x06
    291a:	fd 80       	ldd	r15, Y+5	; 0x05
    291c:	0c 81       	ldd	r16, Y+4	; 0x04
    291e:	1b 81       	ldd	r17, Y+3	; 0x03
    2920:	aa 81       	ldd	r26, Y+2	; 0x02
    2922:	b9 81       	ldd	r27, Y+1	; 0x01
    2924:	ce 0f       	add	r28, r30
    2926:	d1 1d       	adc	r29, r1
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	ed 01       	movw	r28, r26
    2934:	08 95       	ret

00002936 <_exit>:
    2936:	f8 94       	cli

00002938 <__stop_program>:
    2938:	ff cf       	rjmp	.-2      	; 0x2938 <__stop_program>
